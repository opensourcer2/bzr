<refentry id="GladeCommand">
<refmeta>
<refentrytitle role="top_of_page" id="GladeCommand.top_of_page">GladeCommand</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GLADEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GladeCommand</refname>
<refpurpose>An event filter to implement the Undo/Redo stack.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="GladeCommand.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="GCSetPropData">GCSetPropData</link>;
                    <link linkend="GladeCommand-struct">GladeCommand</link>;
<link linkend="void">void</link>                <link linkend="glade-command-push-group">glade_command_push_group</link>            (const <link linkend="gchar">gchar</link> *fmt,
                                                         ...);
<link linkend="void">void</link>                <link linkend="glade-command-pop-group">glade_command_pop_group</link>             (void);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-command-execute">glade_command_execute</link>               (<link linkend="GladeCommand">GladeCommand</link> *command);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-command-undo">glade_command_undo</link>                  (<link linkend="GladeCommand">GladeCommand</link> *command);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-command-unifies">glade_command_unifies</link>               (<link linkend="GladeCommand">GladeCommand</link> *command,
                                                         <link linkend="GladeCommand">GladeCommand</link> *other);
<link linkend="void">void</link>                <link linkend="glade-command-collapse">glade_command_collapse</link>              (<link linkend="GladeCommand">GladeCommand</link> *command,
                                                         <link linkend="GladeCommand">GladeCommand</link> *other);
<link linkend="void">void</link>                <link linkend="glade-command-set-property">glade_command_set_property</link>          (<link linkend="GladeProperty">GladeProperty</link> *property,
                                                         ...);
<link linkend="void">void</link>                <link linkend="glade-command-set-property-value">glade_command_set_property_value</link>    (<link linkend="GladeProperty">GladeProperty</link> *property,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="glade-command-set-properties">glade_command_set_properties</link>        (<link linkend="GladeProperty">GladeProperty</link> *property,
                                                         const <link linkend="GValue">GValue</link> *old_value,
                                                         const <link linkend="GValue">GValue</link> *new_value,
                                                         ...);
<link linkend="void">void</link>                <link linkend="glade-command-set-properties-list">glade_command_set_properties_list</link>   (<link linkend="GladeProject">GladeProject</link> *project,
                                                         <link linkend="GList">GList</link> *props);
<link linkend="void">void</link>                <link linkend="glade-command-set-name">glade_command_set_name</link>              (<link linkend="GladeWidget">GladeWidget</link> *glade_widget,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="void">void</link>                <link linkend="glade-command-delete">glade_command_delete</link>                (<link linkend="GList">GList</link> *widgets);
<link linkend="GladeWidget">GladeWidget</link>*        <link linkend="glade-command-create">glade_command_create</link>                (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladePlaceholder">GladePlaceholder</link> *placeholder,
                                                         <link linkend="GladeProject">GladeProject</link> *project);
<link linkend="void">void</link>                <link linkend="glade-command-cut">glade_command_cut</link>                   (<link linkend="GList">GList</link> *widgets);
<link linkend="void">void</link>                <link linkend="glade-command-copy">glade_command_copy</link>                  (<link linkend="GList">GList</link> *widgets);
<link linkend="void">void</link>                <link linkend="glade-command-paste">glade_command_paste</link>                 (<link linkend="GList">GList</link> *widgets,
                                                         <link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladePlaceholder">GladePlaceholder</link> *placeholder);
<link linkend="void">void</link>                <link linkend="glade-command-dnd">glade_command_dnd</link>                   (<link linkend="GList">GList</link> *widgets,
                                                         <link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladePlaceholder">GladePlaceholder</link> *placeholder);
<link linkend="void">void</link>                <link linkend="glade-command-add-signal">glade_command_add_signal</link>            (<link linkend="GladeWidget">GladeWidget</link> *glade_widget,
                                                         const <link linkend="GladeSignal">GladeSignal</link> *signal);
<link linkend="void">void</link>                <link linkend="glade-command-remove-signal">glade_command_remove_signal</link>         (<link linkend="GladeWidget">GladeWidget</link> *glade_widget,
                                                         const <link linkend="GladeSignal">GladeSignal</link> *signal);
<link linkend="void">void</link>                <link linkend="glade-command-change-signal">glade_command_change_signal</link>         (<link linkend="GladeWidget">GladeWidget</link> *glade_widget,
                                                         const <link linkend="GladeSignal">GladeSignal</link> *old_signal,
                                                         const <link linkend="GladeSignal">GladeSignal</link> *new_signal);
<link linkend="void">void</link>                <link linkend="glade-command-set-i18n">glade_command_set_i18n</link>              (<link linkend="GladeProperty">GladeProperty</link> *property,
                                                         <link linkend="gboolean">gboolean</link> translatable,
                                                         <link linkend="gboolean">gboolean</link> has_context,
                                                         const <link linkend="gchar">gchar</link> *comment);
</synopsis>
</refsynopsisdiv>

<refsect1 id="GladeCommand.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----GladeCommand
</synopsis>

</refsect1>








<refsect1 id="GladeCommand.description" role="desc">
<title role="desc.title">Description</title>
<para>
The Glade Command api allows us to view user actions as items and execute 
and undo those items; each <link linkend="GladeProject"><type>GladeProject</type></link> has its own Undo/Redo stack.</para>
<para>

</para>
</refsect1>

<refsect1 id="GladeCommand.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GCSetPropData" role="struct">
<title>GCSetPropData</title>
<indexterm zone="GCSetPropData"><primary>GCSetPropData</primary></indexterm><programlisting>typedef struct {
	GladeProperty *property;
	GValue        *new_value;
	GValue        *old_value;
} GCSetPropData;
</programlisting>
<para>
<link linkend="GladeProperties"><type>GladeProperties</type></link> can be set in a list as one command,
for Undo purposes; we store the list of <link linkend="GCSetPropData"><type>GCSetPropData</type></link> with
their old and new <link linkend="GValue"><type>GValue</type></link>.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GladeProperty">GladeProperty</link>&nbsp;*<structfield>property</structfield>;</term>
<listitem><simpara> A <link linkend="GladeProperty"><type>GladeProperty</type></link> to set
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GValue">GValue</link>&nbsp;*<structfield>new_value</structfield>;</term>
<listitem><simpara> The new <link linkend="GValue"><type>GValue</type></link> to assign to <parameter>property</parameter>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GValue">GValue</link>&nbsp;*<structfield>old_value</structfield>;</term>
<listitem><simpara> The old <link linkend="GValue"><type>GValue</type></link> of <parameter>property</parameter>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeCommand-struct" role="struct">
<title>GladeCommand</title>
<indexterm zone="GladeCommand-struct"><primary>GladeCommand</primary></indexterm><programlisting>typedef struct _GladeCommand GladeCommand;</programlisting>
<para>

</para></refsect2>
<refsect2 id="glade-command-push-group" role="function">
<title>glade_command_push_group ()</title>
<indexterm zone="glade-command-push-group"><primary>glade_command_push_group</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_push_group            (const <link linkend="gchar">gchar</link> *fmt,
                                                         ...);</programlisting>
<para>
Marks the begining of a group.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fmt</parameter>&nbsp;:</term>
<listitem><simpara>         The collective desctiption of the command group.
              only the description of the first group on the 
              stack is used when embedding groups.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> args to the format string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-pop-group" role="function">
<title>glade_command_pop_group ()</title>
<indexterm zone="glade-command-pop-group"><primary>glade_command_pop_group</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_pop_group             (void);</programlisting>
<para>
Mark the end of a command group.</para>
<para>

</para></refsect2>
<refsect2 id="glade-command-execute" role="function">
<title>glade_command_execute ()</title>
<indexterm zone="glade-command-execute"><primary>glade_command_execute</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_command_execute               (<link linkend="GladeCommand">GladeCommand</link> *command);</programlisting>
<para>
Executes <parameter>command</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>command</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeCommand"><type>GladeCommand</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether the command was successfully executed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-undo" role="function">
<title>glade_command_undo ()</title>
<indexterm zone="glade-command-undo"><primary>glade_command_undo</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_command_undo                  (<link linkend="GladeCommand">GladeCommand</link> *command);</programlisting>
<para>
Undo the effects of <parameter>command</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>command</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeCommand"><type>GladeCommand</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>whether the command was successfully reversed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-unifies" role="function">
<title>glade_command_unifies ()</title>
<indexterm zone="glade-command-unifies"><primary>glade_command_unifies</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_command_unifies               (<link linkend="GladeCommand">GladeCommand</link> *command,
                                                         <link linkend="GladeCommand">GladeCommand</link> *other);</programlisting>
<para>
Checks whether <parameter>command</parameter> and <parameter>other</parameter> can be unified
to make one single command.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>command</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeCommand"><type>GladeCommand</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>other</parameter>&nbsp;:</term>
<listitem><simpara> another <link linkend="GladeCommand"><type>GladeCommand</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether they can be unified.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-collapse" role="function">
<title>glade_command_collapse ()</title>
<indexterm zone="glade-command-collapse"><primary>glade_command_collapse</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_collapse              (<link linkend="GladeCommand">GladeCommand</link> *command,
                                                         <link linkend="GladeCommand">GladeCommand</link> *other);</programlisting>
<para>
Merges <parameter>other</parameter> into <parameter>command</parameter>, so that <parameter>command</parameter> now
covers both commands and <parameter>other</parameter> can be dispensed with.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>command</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeCommand"><type>GladeCommand</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>other</parameter>&nbsp;:</term>
<listitem><simpara> another <link linkend="GladeCommand"><type>GladeCommand</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-set-property" role="function">
<title>glade_command_set_property ()</title>
<indexterm zone="glade-command-set-property"><primary>glade_command_set_property</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_set_property          (<link linkend="GladeProperty">GladeProperty</link> *property,
                                                         ...);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>property</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-set-property-value" role="function">
<title>glade_command_set_property_value ()</title>
<indexterm zone="glade-command-set-property-value"><primary>glade_command_set_property_value</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_set_property_value    (<link linkend="GladeProperty">GladeProperty</link> *property,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>property</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-set-properties" role="function">
<title>glade_command_set_properties ()</title>
<indexterm zone="glade-command-set-properties"><primary>glade_command_set_properties</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_set_properties        (<link linkend="GladeProperty">GladeProperty</link> *property,
                                                         const <link linkend="GValue">GValue</link> *old_value,
                                                         const <link linkend="GValue">GValue</link> *new_value,
                                                         ...);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>property</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old_value</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_value</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-set-properties-list" role="function">
<title>glade_command_set_properties_list ()</title>
<indexterm zone="glade-command-set-properties-list"><primary>glade_command_set_properties_list</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_set_properties_list   (<link linkend="GladeProject">GladeProject</link> *project,
                                                         <link linkend="GList">GList</link> *props);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>project</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>props</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-set-name" role="function">
<title>glade_command_set_name ()</title>
<indexterm zone="glade-command-set-name"><primary>glade_command_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_set_name              (<link linkend="GladeWidget">GladeWidget</link> *glade_widget,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>glade_widget</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-delete" role="function">
<title>glade_command_delete ()</title>
<indexterm zone="glade-command-delete"><primary>glade_command_delete</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_delete                (<link linkend="GList">GList</link> *widgets);</programlisting>
<para>
Performs a delete command on the list of widgets.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widgets</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GList"><type>GList</type></link> of <link linkend="GladeWidgets"><type>GladeWidgets</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-create" role="function">
<title>glade_command_create ()</title>
<indexterm zone="glade-command-create"><primary>glade_command_create</primary></indexterm><programlisting><link linkend="GladeWidget">GladeWidget</link>*        glade_command_create                (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladePlaceholder">GladePlaceholder</link> *placeholder,
                                                         <link linkend="GladeProject">GladeProject</link> *project);</programlisting>
<para>
Creates a new widget using <parameter>adaptor</parameter> and put in place of the <parameter>placeholder</parameter>
in the <parameter>project</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>		A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>placeholder</parameter>&nbsp;:</term>
<listitem><simpara>	the placeholder which will be substituted by the widget
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>project</parameter>&nbsp;:</term>
<listitem><simpara>            the project his widget belongs to.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>the newly created widget.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-cut" role="function">
<title>glade_command_cut ()</title>
<indexterm zone="glade-command-cut"><primary>glade_command_cut</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_cut                   (<link linkend="GList">GList</link> *widgets);</programlisting>
<para>
Removes the list of widgets and adds them to the clipboard.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widgets</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GList"><type>GList</type></link> of <link linkend="GladeWidgets"><type>GladeWidgets</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-copy" role="function">
<title>glade_command_copy ()</title>
<indexterm zone="glade-command-copy"><primary>glade_command_copy</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_copy                  (<link linkend="GList">GList</link> *widgets);</programlisting>
<para>
Copies the list of widgets and adds them to the clipboard.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widgets</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GList"><type>GList</type></link> of <link linkend="GladeWidgets"><type>GladeWidgets</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-paste" role="function">
<title>glade_command_paste ()</title>
<indexterm zone="glade-command-paste"><primary>glade_command_paste</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_paste                 (<link linkend="GList">GList</link> *widgets,
                                                         <link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladePlaceholder">GladePlaceholder</link> *placeholder);</programlisting>
<para>
Performs a paste command on all widgets in <parameter>widgets</parameter> to <parameter>parent</parameter>, possibly
replacing <parameter>placeholder</parameter> (note toplevels dont need a parent; the active project
will be used when pasting toplevel objects).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widgets</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GList"><type>GList</type></link> of <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>placeholder</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladePlaceholder"><type>GladePlaceholder</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-dnd" role="function">
<title>glade_command_dnd ()</title>
<indexterm zone="glade-command-dnd"><primary>glade_command_dnd</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_dnd                   (<link linkend="GList">GList</link> *widgets,
                                                         <link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladePlaceholder">GladePlaceholder</link> *placeholder);</programlisting>
<para>
Performs a drag-n-drop command, i.e. removes the list of widgets and adds them 
to the new parent, possibly replacing <parameter>placeholder</parameter> (note toplevels dont need a 
parent; the active project will be used when pasting toplevel objects).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widgets</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GList"><type>GList</type></link> of <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>placeholder</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladePlaceholder"><type>GladePlaceholder</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-add-signal" role="function">
<title>glade_command_add_signal ()</title>
<indexterm zone="glade-command-add-signal"><primary>glade_command_add_signal</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_add_signal            (<link linkend="GladeWidget">GladeWidget</link> *glade_widget,
                                                         const <link linkend="GladeSignal">GladeSignal</link> *signal);</programlisting>
<para>
TODO: write me</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>glade_widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signal</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeSignal"><type>GladeSignal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-remove-signal" role="function">
<title>glade_command_remove_signal ()</title>
<indexterm zone="glade-command-remove-signal"><primary>glade_command_remove_signal</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_remove_signal         (<link linkend="GladeWidget">GladeWidget</link> *glade_widget,
                                                         const <link linkend="GladeSignal">GladeSignal</link> *signal);</programlisting>
<para>
TODO: write me</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>glade_widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signal</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeSignal"><type>GladeSignal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-change-signal" role="function">
<title>glade_command_change_signal ()</title>
<indexterm zone="glade-command-change-signal"><primary>glade_command_change_signal</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_change_signal         (<link linkend="GladeWidget">GladeWidget</link> *glade_widget,
                                                         const <link linkend="GladeSignal">GladeSignal</link> *old_signal,
                                                         const <link linkend="GladeSignal">GladeSignal</link> *new_signal);</programlisting>
<para>
TODO: write me</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>glade_widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old_signal</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeSignal"><type>GladeSignal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_signal</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeSignal"><type>GladeSignal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-command-set-i18n" role="function">
<title>glade_command_set_i18n ()</title>
<indexterm zone="glade-command-set-i18n"><primary>glade_command_set_i18n</primary></indexterm><programlisting><link linkend="void">void</link>                glade_command_set_i18n              (<link linkend="GladeProperty">GladeProperty</link> *property,
                                                         <link linkend="gboolean">gboolean</link> translatable,
                                                         <link linkend="gboolean">gboolean</link> has_context,
                                                         const <link linkend="gchar">gchar</link> *comment);</programlisting>
<para>
Sets the i18n data on the property.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>property</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>translatable</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="gboolean"><type>gboolean</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>has_context</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="gboolean"><type>gboolean</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>comment</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="const"><type>const</type></link> gchar *
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
