<refentry id="gladeui-glade-utils">
<refmeta>
<refentrytitle role="top_of_page" id="gladeui-glade-utils.top_of_page">Glade Utils</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GLADEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Glade Utils</refname>
<refpurpose>Welcome to the zoo.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="gladeui-glade-utils.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
enum                <link linkend="GladeUtilFileDialogType">GladeUtilFileDialogType</link>;
enum                <link linkend="GladeUIMessageType">GladeUIMessageType</link>;
<link linkend="GType">GType</link>               <link linkend="glade-util-get-type-from-name">glade_util_get_type_from_name</link>       (const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gboolean">gboolean</link> have_func);
<link linkend="GParamSpec">GParamSpec</link>*         <link linkend="glade-utils-get-pspec-from-funcname">glade_utils_get_pspec_from_funcname</link> (const <link linkend="gchar">gchar</link> *funcname);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-util-ui-message">glade_util_ui_message</link>               (<link linkend="GtkWidget">GtkWidget</link> *parent,
                                                         <link linkend="GladeUIMessageType">GladeUIMessageType</link> type,
                                                         const <link linkend="gchar">gchar</link> *format,
                                                         ...);
<link linkend="void">void</link>                <link linkend="glade-util-flash-message">glade_util_flash_message</link>            (<link linkend="GtkWidget">GtkWidget</link> *statusbar,
                                                         <link linkend="guint">guint</link> context_id,
                                                         <link linkend="gchar">gchar</link> *format,
                                                         ...);
<link linkend="gint">gint</link>                <link linkend="glade-util-compare-stock-labels">glade_util_compare_stock_labels</link>     (<link linkend="gconstpointer">gconstpointer</link> a,
                                                         <link linkend="gconstpointer">gconstpointer</link> b);
<link linkend="void">void</link>                <link linkend="glade-util-hide-window">glade_util_hide_window</link>              (<link linkend="GtkWindow">GtkWindow</link> *window);
<link linkend="gchar">gchar</link>*              <link linkend="glade-util-gtk-combo-func">glade_util_gtk_combo_func</link>           (<link linkend="gpointer">gpointer</link> data);
<link linkend="gpointer">gpointer</link>            <link linkend="glade-util-gtk-combo-find">glade_util_gtk_combo_find</link>           (<link linkend="GtkCombo">GtkCombo</link> *combo);
<link linkend="GtkWidget">GtkWidget</link>*          <link linkend="glade-util-file-dialog-new">glade_util_file_dialog_new</link>          (const <link linkend="gchar">gchar</link> *title,
                                                         <link linkend="GtkWindow">GtkWindow</link> *parent,
                                                         <link linkend="GladeUtilFileDialogType">GladeUtilFileDialogType</link> action);
<link linkend="void">void</link>                <link linkend="glade-util-replace">glade_util_replace</link>                  (<link linkend="gchar">gchar</link> *str,
                                                         <link linkend="gchar">gchar</link> a,
                                                         <link linkend="gchar">gchar</link> b);
<link linkend="gchar">gchar</link>*              <link linkend="glade-util-read-prop-name">glade_util_read_prop_name</link>           (const <link linkend="gchar">gchar</link> *str);
<link linkend="gchar">gchar</link>*              <link linkend="glade-util-duplicate-underscores">glade_util_duplicate_underscores</link>    (const <link linkend="gchar">gchar</link> *name);
<link linkend="void">void</link>                <link linkend="glade-util-add-selection">glade_util_add_selection</link>            (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="glade-util-remove-selection">glade_util_remove_selection</link>         (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-util-has-selection">glade_util_has_selection</link>            (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="glade-util-clear-selection">glade_util_clear_selection</link>          (void);
<link linkend="GList">GList</link>*              <link linkend="glade-util-get-selection">glade_util_get_selection</link>            (void);
<link linkend="GList">GList</link>*              <link linkend="glade-util-container-get-all-children">glade_util_container_get_all_children</link>
                                                        (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="gint">gint</link>                <link linkend="glade-util-count-placeholders">glade_util_count_placeholders</link>       (<link linkend="GladeWidget">GladeWidget</link> *parent);
<link linkend="GtkTreeIter">GtkTreeIter</link>*        <link linkend="glade-util-find-iter-by-widget">glade_util_find_iter_by_widget</link>      (<link linkend="GtkTreeModel">GtkTreeModel</link> *model,
                                                         <link linkend="GladeWidget">GladeWidget</link> *findme,
                                                         <link linkend="gint">gint</link> column);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-util-basenames-match">glade_util_basenames_match</link>          (const <link linkend="gchar">gchar</link> *path1,
                                                         const <link linkend="gchar">gchar</link> *path2);
<link linkend="GList">GList</link>*              <link linkend="glade-util-purify-list">glade_util_purify_list</link>              (<link linkend="GList">GList</link> *list);
<link linkend="GList">GList</link>*              <link linkend="glade-util-added-in-list">glade_util_added_in_list</link>            (<link linkend="GList">GList</link> *old_list,
                                                         <link linkend="GList">GList</link> *new_list);
<link linkend="GList">GList</link>*              <link linkend="glade-util-removed-from-list">glade_util_removed_from_list</link>        (<link linkend="GList">GList</link> *old_list,
                                                         <link linkend="GList">GList</link> *new_list);
<link linkend="gchar">gchar</link>*              <link linkend="glade-util-canonical-path">glade_util_canonical_path</link>           (const <link linkend="gchar">gchar</link> *path);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-util-copy-file">glade_util_copy_file</link>                (const <link linkend="gchar">gchar</link> *src_path,
                                                         const <link linkend="gchar">gchar</link> *dest_path);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-util-class-implements-interface">glade_util_class_implements_interface</link>
                                                        (<link linkend="GType">GType</link> class_type,
                                                         <link linkend="GType">GType</link> iface_type);
<link linkend="GModule">GModule</link>*            <link linkend="glade-util-load-library">glade_util_load_library</link>             (const <link linkend="gchar">gchar</link> *library_name);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-util-file-is-writeable">glade_util_file_is_writeable</link>        (const <link linkend="gchar">gchar</link> *path);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-util-have-devhelp">glade_util_have_devhelp</link>             (void);
<link linkend="GtkWidget">GtkWidget</link>*          <link linkend="glade-util-get-devhelp-icon">glade_util_get_devhelp_icon</link>         (<link linkend="GtkIconSize">GtkIconSize</link> size);
<link linkend="void">void</link>                <link linkend="glade-util-search-devhelp">glade_util_search_devhelp</link>           (const <link linkend="gchar">gchar</link> *book,
                                                         const <link linkend="gchar">gchar</link> *page,
                                                         const <link linkend="gchar">gchar</link> *search);
<link linkend="GtkWidget">GtkWidget</link>*          <link linkend="glade-util-get-placeholder-from-pointer">glade_util_get_placeholder_from_pointer</link>
                                                        (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-util-object-is-loading">glade_util_object_is_loading</link>        (<link linkend="GObject">GObject</link> *object);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-util-url-show">glade_util_url_show</link>                 (const <link linkend="gchar">gchar</link> *url);
<link linkend="time-t">time_t</link>              <link linkend="glade-util-get-file-mtime">glade_util_get_file_mtime</link>           (const <link linkend="gchar">gchar</link> *filename,
                                                         <link linkend="GError">GError</link> **error);
</synopsis>
</refsynopsisdiv>









<refsect1 id="gladeui-glade-utils.description" role="desc">
<title role="desc.title">Description</title>
<para>
This is where all of that really usefull miscalanious stuff lands up.</para>
<para>

</para>
</refsect1>

<refsect1 id="gladeui-glade-utils.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GladeUtilFileDialogType" role="enum">
<title>enum GladeUtilFileDialogType</title>
<indexterm zone="GladeUtilFileDialogType"><primary>GladeUtilFileDialogType</primary></indexterm><programlisting>typedef enum _GladeUtilFileDialogType
{
        GLADE_FILE_DIALOG_ACTION_OPEN,
        GLADE_FILE_DIALOG_ACTION_SAVE
} GladeUtilFileDialogType;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="GladeUIMessageType" role="enum">
<title>enum GladeUIMessageType</title>
<indexterm zone="GladeUIMessageType"><primary>GladeUIMessageType</primary></indexterm><programlisting>typedef enum 
{
	GLADE_UI_INFO,
	GLADE_UI_WARN,
	GLADE_UI_ERROR,
	GLADE_UI_ARE_YOU_SURE,
	GLADE_UI_YES_OR_NO
} GladeUIMessageType;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="glade-util-get-type-from-name" role="function">
<title>glade_util_get_type_from_name ()</title>
<indexterm zone="glade-util-get-type-from-name"><primary>glade_util_get_type_from_name</primary></indexterm><programlisting><link linkend="GType">GType</link>               glade_util_get_type_from_name       (const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gboolean">gboolean</link> have_func);</programlisting>
<para>
Returns the type using the "get type" function name based on <parameter>name</parameter>.  
If the <parameter>have_func</parameter> flag is true,<parameter>name</parameter> is used directly, otherwise the get-type 
function is contrived from <parameter>name</parameter> then used.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the <link linkend="GType"><type>GType</type></link> - like 'GtkWidget' or a "get-type" function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>have_func</parameter>&nbsp;:</term>
<listitem><simpara> function-name flag -- true if the name is a "get-type" function.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-utils-get-pspec-from-funcname" role="function">
<title>glade_utils_get_pspec_from_funcname ()</title>
<indexterm zone="glade-utils-get-pspec-from-funcname"><primary>glade_utils_get_pspec_from_funcname</primary></indexterm><programlisting><link linkend="GParamSpec">GParamSpec</link>*         glade_utils_get_pspec_from_funcname (const <link linkend="gchar">gchar</link> *funcname);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>funcname</parameter>&nbsp;:</term>
<listitem><simpara> the symbol name of a function to generate a <link linkend="GParamSpec"><type>GParamSpec</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="GParamSpec"><type>GParamSpec</type></link> created by the delagate function
         specified by <parameter>funcname</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-ui-message" role="function">
<title>glade_util_ui_message ()</title>
<indexterm zone="glade-util-ui-message"><primary>glade_util_ui_message</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_util_ui_message               (<link linkend="GtkWidget">GtkWidget</link> *parent,
                                                         <link linkend="GladeUIMessageType">GladeUIMessageType</link> type,
                                                         const <link linkend="gchar">gchar</link> *format,
                                                         ...);</programlisting>
<para>
Creates a new warning dialog window as a child of <parameter>parent</parameter> containing
the text of <parameter>format</parameter>, runs it, then destroys it on close. Depending
on <parameter>type</parameter>, a cancel button may apear or the icon may change.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkWindow"><type>GtkWindow</type></link> cast as a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>   a <link linkend="GladeUIMessageType"><type>GladeUIMessageType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara> a printf style format string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>    args for the format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> True if the <parameter>type</parameter> was GLADE_UI_ARE_YOU_SURE and the user
         selected "OK", True if the <parameter>type</parameter> was GLADE_UI_YES_OR_NO and
         the user selected "YES"; False otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-flash-message" role="function">
<title>glade_util_flash_message ()</title>
<indexterm zone="glade-util-flash-message"><primary>glade_util_flash_message</primary></indexterm><programlisting><link linkend="void">void</link>                glade_util_flash_message            (<link linkend="GtkWidget">GtkWidget</link> *statusbar,
                                                         <link linkend="guint">guint</link> context_id,
                                                         <link linkend="gchar">gchar</link> *format,
                                                         ...);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>statusbar</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context_id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-compare-stock-labels" role="function">
<title>glade_util_compare_stock_labels ()</title>
<indexterm zone="glade-util-compare-stock-labels"><primary>glade_util_compare_stock_labels</primary></indexterm><programlisting><link linkend="gint">gint</link>                glade_util_compare_stock_labels     (<link linkend="gconstpointer">gconstpointer</link> a,
                                                         <link linkend="gconstpointer">gconstpointer</link> b);</programlisting>
<para>
This is a <link linkend="GCompareFunc"><type>GCompareFunc</type></link> that compares the labels of two stock items, 
ignoring any '_' characters. It isn't particularly efficient.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="gconstpointer"><type>gconstpointer</type></link> to a <link linkend="GtkStockItem"><type>GtkStockItem</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="gconstpointer"><type>gconstpointer</type></link> to a <link linkend="GtkStockItem"><type>GtkStockItem</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> negative value if <parameter>a</parameter> &lt; <parameter>b</parameter>; zero if <parameter>a</parameter> = <parameter>b</parameter>; 
         positive value if <parameter>a</parameter> &gt; <parameter>b</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-hide-window" role="function">
<title>glade_util_hide_window ()</title>
<indexterm zone="glade-util-hide-window"><primary>glade_util_hide_window</primary></indexterm><programlisting><link linkend="void">void</link>                glade_util_hide_window              (<link linkend="GtkWindow">GtkWindow</link> *window);</programlisting>
<para>
If you use this function to handle the delete_event of a window, when it
will be shown again it will appear in the position where it was before
beeing hidden.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkWindow"><type>GtkWindow</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-gtk-combo-func" role="function">
<title>glade_util_gtk_combo_func ()</title>
<indexterm zone="glade-util-gtk-combo-func"><primary>glade_util_gtk_combo_func</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              glade_util_gtk_combo_func           (<link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
TODO: write me</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-gtk-combo-find" role="function">
<title>glade_util_gtk_combo_find ()</title>
<indexterm zone="glade-util-gtk-combo-find"><primary>glade_util_gtk_combo_find</primary></indexterm><programlisting><link linkend="gpointer">gpointer</link>            glade_util_gtk_combo_find           (<link linkend="GtkCombo">GtkCombo</link> *combo);</programlisting>
<para>
TODO: write me</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>combo</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-file-dialog-new" role="function">
<title>glade_util_file_dialog_new ()</title>
<indexterm zone="glade-util-file-dialog-new"><primary>glade_util_file_dialog_new</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*          glade_util_file_dialog_new          (const <link linkend="gchar">gchar</link> *title,
                                                         <link linkend="GtkWindow">GtkWindow</link> *parent,
                                                         <link linkend="GladeUtilFileDialogType">GladeUtilFileDialogType</link> action);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>title</parameter>&nbsp;:</term>
<listitem><simpara> dialog title
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> the parent <link linkend="GtkWindow"><type>GtkWindow</type></link> for the dialog
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeUtilFileDialogType"><type>GladeUtilFileDialogType</type></link> to say if the dialog will open or save
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a "glade file" file chooser dialog. The caller is responsible 
         for showing the dialog
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-replace" role="function">
<title>glade_util_replace ()</title>
<indexterm zone="glade-util-replace"><primary>glade_util_replace</primary></indexterm><programlisting><link linkend="void">void</link>                glade_util_replace                  (<link linkend="gchar">gchar</link> *str,
                                                         <link linkend="gchar">gchar</link> a,
                                                         <link linkend="gchar">gchar</link> b);</programlisting>
<para>
Replaces each occurance of the character <parameter>a</parameter> in <parameter>str</parameter> to <parameter>b</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> a string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="gchar"><type>gchar</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="gchar"><type>gchar</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-read-prop-name" role="function">
<title>glade_util_read_prop_name ()</title>
<indexterm zone="glade-util-read-prop-name"><primary>glade_util_read_prop_name</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              glade_util_read_prop_name           (const <link linkend="gchar">gchar</link> *str);</programlisting>
<para>
Return a usable version of a property identifier as found
in a freshly parserd <link linkend="GladeInterface"><type>GladeInterface</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> a string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-duplicate-underscores" role="function">
<title>glade_util_duplicate_underscores ()</title>
<indexterm zone="glade-util-duplicate-underscores"><primary>glade_util_duplicate_underscores</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              glade_util_duplicate_underscores    (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Duplicates <parameter>name</parameter>, but the copy has two underscores in place of any single
underscore in the original.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-add-selection" role="function">
<title>glade_util_add_selection ()</title>
<indexterm zone="glade-util-add-selection"><primary>glade_util_add_selection</primary></indexterm><programlisting><link linkend="void">void</link>                glade_util_add_selection            (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Add visual selection to this GtkWidget</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-remove-selection" role="function">
<title>glade_util_remove_selection ()</title>
<indexterm zone="glade-util-remove-selection"><primary>glade_util_remove_selection</primary></indexterm><programlisting><link linkend="void">void</link>                glade_util_remove_selection         (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Remove visual selection from this GtkWidget</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-has-selection" role="function">
<title>glade_util_has_selection ()</title>
<indexterm zone="glade-util-has-selection"><primary>glade_util_has_selection</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_util_has_selection            (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>widget</parameter> has visual selection, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-clear-selection" role="function">
<title>glade_util_clear_selection ()</title>
<indexterm zone="glade-util-clear-selection"><primary>glade_util_clear_selection</primary></indexterm><programlisting><link linkend="void">void</link>                glade_util_clear_selection          (void);</programlisting>
<para>
Clear all visual selections</para>
<para>

</para></refsect2>
<refsect2 id="glade-util-get-selection" role="function">
<title>glade_util_get_selection ()</title>
<indexterm zone="glade-util-get-selection"><primary>glade_util_get_selection</primary></indexterm><programlisting><link linkend="GList">GList</link>*              glade_util_get_selection            (void);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-container-get-all-children" role="function">
<title>glade_util_container_get_all_children ()</title>
<indexterm zone="glade-util-container-get-all-children"><primary>glade_util_container_get_all_children</primary></indexterm><programlisting><link linkend="GList">GList</link>*              glade_util_container_get_all_children
                                                        (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Use this to itterate over all children in a GtkContainer,
as it used <link linkend="forall"><function>_forall()</function></link> instead of <link linkend="foreach"><function>_foreach()</function></link> (and the GTK+ version
of this function is simply not exposed).
</para>
<para>
Note that <link linkend="glade-widget-class-get-children"><function>glade_widget_class_get_children()</function></link> is the high-level
abstraction and will usually end up calling this function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GList"><type>GList</type></link> giving the contents of <parameter>container</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-count-placeholders" role="function">
<title>glade_util_count_placeholders ()</title>
<indexterm zone="glade-util-count-placeholders"><primary>glade_util_count_placeholders</primary></indexterm><programlisting><link linkend="gint">gint</link>                glade_util_count_placeholders       (<link linkend="GladeWidget">GladeWidget</link> *parent);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>the amount of <link linkend="GladePlaceholders"><type>GladePlaceholders</type></link> parented by <parameter>parent</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-find-iter-by-widget" role="function">
<title>glade_util_find_iter_by_widget ()</title>
<indexterm zone="glade-util-find-iter-by-widget"><primary>glade_util_find_iter_by_widget</primary></indexterm><programlisting><link linkend="GtkTreeIter">GtkTreeIter</link>*        glade_util_find_iter_by_widget      (<link linkend="GtkTreeModel">GtkTreeModel</link> *model,
                                                         <link linkend="GladeWidget">GladeWidget</link> *findme,
                                                         <link linkend="gint">gint</link> column);</programlisting>
<para>
Looks through <parameter>model</parameter> for the <link linkend="GtkTreeIter"><type>GtkTreeIter</type></link> corresponding to 
<parameter>findme</parameter> under <parameter>column</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>model</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTreeModel"><type>GtkTreeModel</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>findme</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>column</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="gint"><type>gint</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="GtkTreeIter"><type>GtkTreeIter</type></link> from <parameter>model</parameter> corresponding
to <parameter>findme</parameter> which should be freed with <link linkend="gtk-tree-iter-free"><function>gtk_tree_iter_free()</function></link>

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-basenames-match" role="function">
<title>glade_util_basenames_match ()</title>
<indexterm zone="glade-util-basenames-match"><primary>glade_util_basenames_match</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_util_basenames_match          (const <link linkend="gchar">gchar</link> *path1,
                                                         const <link linkend="gchar">gchar</link> *path2);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>path1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-purify-list" role="function">
<title>glade_util_purify_list ()</title>
<indexterm zone="glade-util-purify-list"><primary>glade_util_purify_list</primary></indexterm><programlisting><link linkend="GList">GList</link>*              glade_util_purify_list              (<link linkend="GList">GList</link> *list);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GList"><type>GList</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A newly allocated version of <parameter>list</parameter> with no 
         duplicate data entries
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-added-in-list" role="function">
<title>glade_util_added_in_list ()</title>
<indexterm zone="glade-util-added-in-list"><primary>glade_util_added_in_list</primary></indexterm><programlisting><link linkend="GList">GList</link>*              glade_util_added_in_list            (<link linkend="GList">GList</link> *old_list,
                                                         <link linkend="GList">GList</link> *new_list);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>old_list</parameter>&nbsp;:</term>
<listitem><simpara> the old <link linkend="GList"><type>GList</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_list</parameter>&nbsp;:</term>
<listitem><simpara> the new <link linkend="GList"><type>GList</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A newly allocated <link linkend="GList"><type>GList</type></link> of elements that
         are in <parameter>new</parameter> but not in <parameter>old</parameter>

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-removed-from-list" role="function">
<title>glade_util_removed_from_list ()</title>
<indexterm zone="glade-util-removed-from-list"><primary>glade_util_removed_from_list</primary></indexterm><programlisting><link linkend="GList">GList</link>*              glade_util_removed_from_list        (<link linkend="GList">GList</link> *old_list,
                                                         <link linkend="GList">GList</link> *new_list);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>old_list</parameter>&nbsp;:</term>
<listitem><simpara> the old <link linkend="GList"><type>GList</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_list</parameter>&nbsp;:</term>
<listitem><simpara> the new <link linkend="GList"><type>GList</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A newly allocated <link linkend="GList"><type>GList</type></link> of elements that
         are in <parameter>old</parameter> no longer in <parameter>new</parameter>

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-canonical-path" role="function">
<title>glade_util_canonical_path ()</title>
<indexterm zone="glade-util-canonical-path"><primary>glade_util_canonical_path</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              glade_util_canonical_path           (const <link linkend="gchar">gchar</link> *path);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> any path that may contain ".." or "." components
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an absolute path to the specified file or directory
         that contains no ".." or "." components (this does
         not call readlink like <link linkend="realpath"><function>realpath()</function></link> does).

Note: on some systems; I think its possible that we dont have
      permission to execute in the directory in which the glade
      file resides; I decided finally to do it this way anyway
      since libc's <link linkend="realpath"><function>realpath()</function></link> does exactly the same.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-copy-file" role="function">
<title>glade_util_copy_file ()</title>
<indexterm zone="glade-util-copy-file"><primary>glade_util_copy_file</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_util_copy_file                (const <link linkend="gchar">gchar</link> *src_path,
                                                         const <link linkend="gchar">gchar</link> *dest_path);</programlisting>
<para>
Copies a file from <parameter>src</parameter> to <parameter>dest</parameter>, queries the user
if it involves overwriting the target and displays an
error message upon failure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>src_path</parameter>&nbsp;:</term>
<listitem><simpara>  the path to the source file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest_path</parameter>&nbsp;:</term>
<listitem><simpara> the path to the destination file to create or overwrite.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> True if the copy was successfull.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-class-implements-interface" role="function">
<title>glade_util_class_implements_interface ()</title>
<indexterm zone="glade-util-class-implements-interface"><primary>glade_util_class_implements_interface</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_util_class_implements_interface
                                                        (<link linkend="GType">GType</link> class_type,
                                                         <link linkend="GType">GType</link> iface_type);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class_type</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface_type</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>class_type</parameter> implements the <parameter>iface_type</parameter> interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-load-library" role="function">
<title>glade_util_load_library ()</title>
<indexterm zone="glade-util-load-library"><primary>glade_util_load_library</primary></indexterm><programlisting><link linkend="GModule">GModule</link>*            glade_util_load_library             (const <link linkend="gchar">gchar</link> *library_name);</programlisting>
<para>
Loads the named library from the Glade modules directory, or failing that
from the standard platform specific directories.
</para>
<para>
The <parameter>library_name</parameter> should not include any platform specifix prefix or suffix,
those are automatically added, if needed, by <link linkend="g-module-build-path"><function>g_module_build_path()</function></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>library_name</parameter>&nbsp;:</term>
<listitem><simpara> name of the library
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GModule"><type>GModule</type></link> on success, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-file-is-writeable" role="function">
<title>glade_util_file_is_writeable ()</title>
<indexterm zone="glade-util-file-is-writeable"><primary>glade_util_file_is_writeable</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_util_file_is_writeable        (const <link linkend="gchar">gchar</link> *path);</programlisting>
<para>
Checks whether the file at <parameter>path</parameter> is writeable</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara>  the path to the file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if file is writeable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-have-devhelp" role="function">
<title>glade_util_have_devhelp ()</title>
<indexterm zone="glade-util-have-devhelp"><primary>glade_util_have_devhelp</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_util_have_devhelp             (void);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether the devhelp module is loaded
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-get-devhelp-icon" role="function">
<title>glade_util_get_devhelp_icon ()</title>
<indexterm zone="glade-util-get-devhelp-icon"><primary>glade_util_get_devhelp_icon</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*          glade_util_get_devhelp_icon         (<link linkend="GtkIconSize">GtkIconSize</link> size);</programlisting>
<para>
Creates an image displaying the devhelp icon.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> the preferred icon size
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GtkImage"><type>GtkImage</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-search-devhelp" role="function">
<title>glade_util_search_devhelp ()</title>
<indexterm zone="glade-util-search-devhelp"><primary>glade_util_search_devhelp</primary></indexterm><programlisting><link linkend="void">void</link>                glade_util_search_devhelp           (const <link linkend="gchar">gchar</link> *book,
                                                         const <link linkend="gchar">gchar</link> *page,
                                                         const <link linkend="gchar">gchar</link> *search);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>book</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>page</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>search</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-get-placeholder-from-pointer" role="function">
<title>glade_util_get_placeholder_from_pointer ()</title>
<indexterm zone="glade-util-get-placeholder-from-pointer"><primary>glade_util_get_placeholder_from_pointer</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*          glade_util_get_placeholder_from_pointer
                                                        (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-object-is-loading" role="function">
<title>glade_util_object_is_loading ()</title>
<indexterm zone="glade-util-object-is-loading"><primary>glade_util_object_is_loading</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_util_object_is_loading        (<link linkend="GObject">GObject</link> *object);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> Whether the object's project is being loaded or not.
      
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-url-show" role="function">
<title>glade_util_url_show ()</title>
<indexterm zone="glade-util-url-show"><primary>glade_util_url_show</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_util_url_show                 (const <link linkend="gchar">gchar</link> *url);</programlisting>
<para>
Portable function for showing an URL <parameter>url</parameter> in a web browser.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>url</parameter>&nbsp;:</term>
<listitem><simpara> An URL to display
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if a web browser was successfully launched, or FALSE

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-util-get-file-mtime" role="function">
<title>glade_util_get_file_mtime ()</title>
<indexterm zone="glade-util-get-file-mtime"><primary>glade_util_get_file_mtime</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              glade_util_get_file_mtime           (const <link linkend="gchar">gchar</link> *filename,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Gets the UTC modification time of file <parameter>filename</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> A filename
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> return location for errors
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The mtime of the file, or <link linkend="0:CAPS"><literal>0</literal></link> if the file attributes
         could not be read.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
