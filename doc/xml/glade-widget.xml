<refentry id="GladeWidget">
<refmeta>
<refentrytitle role="top_of_page" id="GladeWidget.top_of_page">GladeWidget</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GLADEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GladeWidget</refname>
<refpurpose>An object wrapper for the Glade runtime environment.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="GladeWidget.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
struct              <link linkend="GladeWidget-struct">GladeWidget</link>;
<link linkend="GladeWidget">GladeWidget</link>*        <link linkend="glade-widget-get-from-gobject">glade_widget_get_from_gobject</link>       (<link linkend="gpointer">gpointer</link> object);
<link linkend="void">void</link>                <link linkend="glade-widget-add-child">glade_widget_add_child</link>              (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladeWidget">GladeWidget</link> *child,
                                                         <link linkend="gboolean">gboolean</link> at_mouse);
<link linkend="void">void</link>                <link linkend="glade-widget-remove-child">glade_widget_remove_child</link>           (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladeWidget">GladeWidget</link> *child);
<link linkend="GladeWidgetInfo">GladeWidgetInfo</link>*    <link linkend="glade-widget-write">glade_widget_write</link>                  (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeInterface">GladeInterface</link> *interface);
<link linkend="GladeWidget">GladeWidget</link>*        <link linkend="glade-widget-read">glade_widget_read</link>                   (<link linkend="GladeProject">GladeProject</link> *project,
                                                         <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info);
<link linkend="void">void</link>                <link linkend="glade-widget-replace">glade_widget_replace</link>                (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GObject">GObject</link> *old_object,
                                                         <link linkend="GObject">GObject</link> *new_object);
<link linkend="void">void</link>                <link linkend="glade-widget-rebuild">glade_widget_rebuild</link>                (<link linkend="GladeWidget">GladeWidget</link> *gwidget);
<link linkend="GladeWidget">GladeWidget</link>*        <link linkend="glade-widget-dup">glade_widget_dup</link>                    (<link linkend="GladeWidget">GladeWidget</link> *template_widget,
                                                         <link linkend="gboolean">gboolean</link> exact);
<link linkend="void">void</link>                <link linkend="glade-widget-copy-signals">glade_widget_copy_signals</link>           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *template_widget);
<link linkend="void">void</link>                <link linkend="glade-widget-copy-properties">glade_widget_copy_properties</link>        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *template_widget);
<link linkend="void">void</link>                <link linkend="glade-widget-set-packing-properties">glade_widget_set_packing_properties</link> (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *container);
<link linkend="GladeProperty">GladeProperty</link>*      <link linkend="glade-widget-get-property">glade_widget_get_property</link>           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);
<link linkend="GladeProperty">GladeProperty</link>*      <link linkend="glade-widget-get-pack-property">glade_widget_get_pack_property</link>      (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);
<link linkend="GList">GList</link>*              <link linkend="glade-widget-dup-properties">glade_widget_dup_properties</link>         (<link linkend="GList">GList</link> *template_props,
                                                         <link linkend="gboolean">gboolean</link> as_load);
<link linkend="void">void</link>                <link linkend="glade-widget-remove-property">glade_widget_remove_property</link>        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);
<link linkend="void">void</link>                <link linkend="glade-widget-show">glade_widget_show</link>                   (<link linkend="GladeWidget">GladeWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="glade-widget-hide">glade_widget_hide</link>                   (<link linkend="GladeWidget">GladeWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="glade-widget-add-signal-handler">glade_widget_add_signal_handler</link>     (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeSignal">GladeSignal</link> *signal_handler);
<link linkend="void">void</link>                <link linkend="glade-widget-remove-signal-handler">glade_widget_remove_signal_handler</link>  (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeSignal">GladeSignal</link> *signal_handler);
<link linkend="void">void</link>                <link linkend="glade-widget-change-signal-handler">glade_widget_change_signal_handler</link>  (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeSignal">GladeSignal</link> *old_signal_handler,
                                                         <link linkend="GladeSignal">GladeSignal</link> *new_signal_handler);
<link linkend="GPtrArray">GPtrArray</link>*          <link linkend="glade-widget-list-signal-handlers">glade_widget_list_signal_handlers</link>   (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *signal_name);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-has-decendant">glade_widget_has_decendant</link>          (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GType">GType</link> type);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-event">glade_widget_event</link>                  (<link linkend="GladeWidget">GladeWidget</link> *gwidget,
                                                         <link linkend="GdkEvent">GdkEvent</link> *event);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-placeholder-relation">glade_widget_placeholder_relation</link>   (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladeWidget">GladeWidget</link> *widget);
<link linkend="GladeWidgetAction">GladeWidgetAction</link>*  <link linkend="glade-widget-get-action">glade_widget_get_action</link>             (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path);
<link linkend="GladeWidgetAction">GladeWidgetAction</link>*  <link linkend="glade-widget-get-pack-action">glade_widget_get_pack_action</link>        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-set-action-sensitive">glade_widget_set_action_sensitive</link>   (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path,
                                                         <link linkend="gboolean">gboolean</link> sensitive);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-set-pack-action-sensitive">glade_widget_set_pack_action_sensitive</link>
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path,
                                                         <link linkend="gboolean">gboolean</link> sensitive);
<link linkend="void">void</link>                <link linkend="glade-widget-remove-action">glade_widget_remove_action</link>          (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path);
<link linkend="void">void</link>                <link linkend="glade-widget-remove-pack-action">glade_widget_remove_pack_action</link>     (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path);
<link linkend="GtkWidget">GtkWidget</link>*          <link linkend="glade-widget-create-action-menu">glade_widget_create_action_menu</link>     (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path);
<link linkend="void">void</link>                <link linkend="glade-widget-project-notify">glade_widget_project_notify</link>         (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeProject">GladeProject</link> *project);
<link linkend="void">void</link>                <link linkend="glade-widget-add-prop-ref">glade_widget_add_prop_ref</link>           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeProperty">GladeProperty</link> *property);
<link linkend="void">void</link>                <link linkend="glade-widget-remove-prop-ref">glade_widget_remove_prop_ref</link>        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeProperty">GladeProperty</link> *property);
<link linkend="void">void</link>                <link linkend="glade-widget-object-set-property">glade_widget_object_set_property</link>    (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="glade-widget-object-get-property">glade_widget_object_get_property</link>    (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="glade-widget-child-set-property">glade_widget_child_set_property</link>     (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="glade-widget-child-get-property">glade_widget_child_get_property</link>     (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-property-get">glade_widget_property_get</link>           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         ...);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-property-set">glade_widget_property_set</link>           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         ...);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-pack-property-get">glade_widget_pack_property_get</link>      (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         ...);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-pack-property-set">glade_widget_pack_property_set</link>      (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         ...);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-property-reset">glade_widget_property_reset</link>         (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-pack-property-reset">glade_widget_pack_property_reset</link>    (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-property-default">glade_widget_property_default</link>       (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-property-original-default">glade_widget_property_original_default</link>
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-pack-property-default">glade_widget_pack_property_default</link>  (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-property-set-sensitive">glade_widget_property_set_sensitive</link> (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> sensitive,
                                                         const <link linkend="gchar">gchar</link> *reason);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-pack-property-set-sensitive">glade_widget_pack_property_set_sensitive</link>
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> sensitive,
                                                         const <link linkend="gchar">gchar</link> *reason);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-property-set-enabled">glade_widget_property_set_enabled</link>   (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> enabled);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-pack-property-set-enabled">glade_widget_pack_property_set_enabled</link>
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> enabled);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-property-set-save-always">glade_widget_property_set_save_always</link>
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> setting);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-pack-property-set-save-always">glade_widget_pack_property_set_save_always</link>
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> setting);
<link linkend="gchar">gchar</link>*              <link linkend="glade-widget-property-string">glade_widget_property_string</link>        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="gchar">gchar</link>*              <link linkend="glade-widget-pack-property-string">glade_widget_pack_property_string</link>   (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="glade-widget-set-name">glade_widget_set_name</link>               (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *name);
const <link linkend="gchar">gchar</link>*        <link linkend="glade-widget-get-name">glade_widget_get_name</link>               (<link linkend="GladeWidget">GladeWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="glade-widget-set-internal">glade_widget_set_internal</link>           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *internal);
const <link linkend="gchar">gchar</link>*        <link linkend="glade-widget-get-internal">glade_widget_get_internal</link>           (<link linkend="GladeWidget">GladeWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="glade-widget-set-object">glade_widget_set_object</link>             (<link linkend="GladeWidget">GladeWidget</link> *gwidget,
                                                         <link linkend="GObject">GObject</link> *new_object);
<link linkend="GObject">GObject</link>*            <link linkend="glade-widget-get-object">glade_widget_get_object</link>             (<link linkend="GladeWidget">GladeWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="glade-widget-set-project">glade_widget_set_project</link>            (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeProject">GladeProject</link> *project);
<link linkend="GladeProject">GladeProject</link>*       <link linkend="glade-widget-get-project">glade_widget_get_project</link>            (<link linkend="GladeWidget">GladeWidget</link> *widget);
<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link>* <link linkend="glade-widget-get-adaptor">glade_widget_get_adaptor</link>            (<link linkend="GladeWidget">GladeWidget</link> *widget);
<link linkend="GladeWidget">GladeWidget</link>*        <link linkend="glade-widget-get-parent">glade_widget_get_parent</link>             (<link linkend="GladeWidget">GladeWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="glade-widget-set-parent">glade_widget_set_parent</link>             (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *parent);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-superuser">glade_widget_superuser</link>              (void);
<link linkend="void">void</link>                <link linkend="glade-widget-push-superuser">glade_widget_push_superuser</link>         (void);
<link linkend="void">void</link>                <link linkend="glade-widget-pop-superuser">glade_widget_pop_superuser</link>          (void);
</synopsis>
</refsynopsisdiv>

<refsect1 id="GladeWidget.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----GladeWidget
         +----<link linkend="GladeFixed">GladeFixed</link>
</synopsis>

</refsect1>





<refsect1 id="GladeWidget.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="GladeWidget--adaptor">adaptor</link>&quot;                  <link linkend="GladeGObjectAdaptor">GladeGObjectAdaptor</link>*  : Read / Write / Construct Only
  &quot;<link linkend="GladeWidget--anarchist">anarchist</link>&quot;                <link linkend="gboolean">gboolean</link>              : Read / Write / Construct Only
  &quot;<link linkend="GladeWidget--info">info</link>&quot;                     <link linkend="gpointer">gpointer</link>              : Write / Construct Only
  &quot;<link linkend="GladeWidget--internal">internal</link>&quot;                 <link linkend="gchar">gchar</link>*                : Read / Write / Construct
  &quot;<link linkend="GladeWidget--internal-name">internal-name</link>&quot;            <link linkend="gchar">gchar</link>*                : Write / Construct Only
  &quot;<link linkend="GladeWidget--name">name</link>&quot;                     <link linkend="gchar">gchar</link>*                : Read / Write / Construct
  &quot;<link linkend="GladeWidget--object">object</link>&quot;                   <link linkend="GObject">GObject</link>*              : Read / Write / Construct
  &quot;<link linkend="GladeWidget--parent">parent</link>&quot;                   <link linkend="GladeWidget">GladeWidget</link>*          : Read / Write / Construct
  &quot;<link linkend="GladeWidget--project">project</link>&quot;                  <link linkend="GladeProject">GladeProject</link>*         : Read / Write / Construct
  &quot;<link linkend="GladeWidget--properties">properties</link>&quot;               <link linkend="gpointer">gpointer</link>              : Read / Write / Construct Only
  &quot;<link linkend="GladeWidget--reason">reason</link>&quot;                   <link linkend="gint">gint</link>                  : Write / Construct Only
  &quot;<link linkend="GladeWidget--template">template</link>&quot;                 <link linkend="GladeWidget">GladeWidget</link>*          : Write / Construct Only
  &quot;<link linkend="GladeWidget--toplevel-height">toplevel-height</link>&quot;          <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="GladeWidget--toplevel-width">toplevel-width</link>&quot;           <link linkend="gint">gint</link>                  : Read / Write
</synopsis>
</refsect1>

<refsect1 id="GladeWidget.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="GladeWidget-add-signal-handler">add-signal-handler</link>&quot;                             : Run Last
  &quot;<link linkend="GladeWidget-button-press-event">button-press-event</link>&quot;                             : Run Last
  &quot;<link linkend="GladeWidget-button-release-event">button-release-event</link>&quot;                           : Run Last
  &quot;<link linkend="GladeWidget-change-signal-handler">change-signal-handler</link>&quot;                          : Run Last
  &quot;<link linkend="GladeWidget-motion-notify-event">motion-notify-event</link>&quot;                            : Run Last
  &quot;<link linkend="GladeWidget-remove-signal-handler">remove-signal-handler</link>&quot;                          : Run Last
</synopsis>
</refsect1>


<refsect1 id="GladeWidget.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="GladeWidget"><type>GladeWidget</type></link> is the proxy between the instantiated runtime object and
the Glade core metadata. This api will be mostly usefull for its
convenience api for getting and setting properties (mostly from the plugin).</para>
<para>

</para>
</refsect1>

<refsect1 id="GladeWidget.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GladeWidget-struct" role="struct">
<title>struct GladeWidget</title>
<indexterm zone="GladeWidget-struct"><primary>GladeWidget</primary></indexterm><programlisting>struct GladeWidget;</programlisting>
<para>

</para></refsect2>
<refsect2 id="glade-widget-get-from-gobject" role="function">
<title>glade_widget_get_from_gobject ()</title>
<indexterm zone="glade-widget-get-from-gobject"><primary>glade_widget_get_from_gobject</primary></indexterm><programlisting><link linkend="GladeWidget">GladeWidget</link>*        glade_widget_get_from_gobject       (<link linkend="gpointer">gpointer</link> object);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-add-child" role="function">
<title>glade_widget_add_child ()</title>
<indexterm zone="glade-widget-add-child"><primary>glade_widget_add_child</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_add_child              (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladeWidget">GladeWidget</link> *child,
                                                         <link linkend="gboolean">gboolean</link> at_mouse);</programlisting>
<para>
Adds <parameter>child</parameter> to <parameter>parent</parameter> in a generic way for this <link linkend="GladeWidget"><type>GladeWidget</type></link> parent.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeWidget"><type>GladeWidget</type></link> to add
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>at_mouse</parameter>&nbsp;:</term>
<listitem><simpara> whether the added widget should be added
           at the current mouse position
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-remove-child" role="function">
<title>glade_widget_remove_child ()</title>
<indexterm zone="glade-widget-remove-child"><primary>glade_widget_remove_child</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_remove_child           (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladeWidget">GladeWidget</link> *child);</programlisting>
<para>
Removes <parameter>child</parameter> from <parameter>parent</parameter> in a generic way for this <link linkend="GladeWidget"><type>GladeWidget</type></link> parent.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeWidget"><type>GladeWidget</type></link> to add
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-write" role="function">
<title>glade_widget_write ()</title>
<indexterm zone="glade-widget-write"><primary>glade_widget_write</primary></indexterm><programlisting><link linkend="GladeWidgetInfo">GladeWidgetInfo</link>*    glade_widget_write                  (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeInterface">GladeInterface</link> *interface);</programlisting>
<para>
TODO: write me</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeInterface"><type>GladeInterface</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-read" role="function">
<title>glade_widget_read ()</title>
<indexterm zone="glade-widget-read"><primary>glade_widget_read</primary></indexterm><programlisting><link linkend="GladeWidget">GladeWidget</link>*        glade_widget_read                   (<link linkend="GladeProject">GladeProject</link> *project,
                                                         <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>project</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeProject"><type>GladeProject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidgetInfo"><type>GladeWidgetInfo</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="GladeWidget"><type>GladeWidget</type></link> for <parameter>project</parameter>, based on <parameter>info</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-replace" role="function">
<title>glade_widget_replace ()</title>
<indexterm zone="glade-widget-replace"><primary>glade_widget_replace</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_replace                (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GObject">GObject</link> *old_object,
                                                         <link linkend="GObject">GObject</link> *new_object);</programlisting>
<para>
Replaces a GObject with another GObject inside a GObject which
behaves as a container.
</para>
<para>
Note that both GObjects must be owned by a GladeWidget.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old_object</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_object</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-rebuild" role="function">
<title>glade_widget_rebuild ()</title>
<indexterm zone="glade-widget-rebuild"><primary>glade_widget_rebuild</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_rebuild                (<link linkend="GladeWidget">GladeWidget</link> *gwidget);</programlisting>
<para>
Replaces the current widget instance with
a new one while preserving all properties children and
takes care of reparenting.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gwidget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-dup" role="function">
<title>glade_widget_dup ()</title>
<indexterm zone="glade-widget-dup"><primary>glade_widget_dup</primary></indexterm><programlisting><link linkend="GladeWidget">GladeWidget</link>*        glade_widget_dup                    (<link linkend="GladeWidget">GladeWidget</link> *template_widget,
                                                         <link linkend="gboolean">gboolean</link> exact);</programlisting>
<para>
Creates a deep copy of <link linkend="GladeWidget"><type>GladeWidget</type></link>. if <parameter>exact</parameter> is specified,
the widget name is preserved and signals are carried over
(this is used to maintain names &amp; signals in Cut/Paste context
as opposed to Copy/Paste contexts).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>template_widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>exact</parameter>&nbsp;:</term>
<listitem><simpara> whether or not to creat an exact duplicate
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The newly created <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-copy-signals" role="function">
<title>glade_widget_copy_signals ()</title>
<indexterm zone="glade-widget-copy-signals"><primary>glade_widget_copy_signals</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_copy_signals           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *template_widget);</programlisting>
<para>
Sets signals in <parameter>widget</parameter> based on the values of
matching signals in <parameter>template_widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>   a 'dest' <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>template_widget</parameter>&nbsp;:</term>
<listitem><simpara> a 'src' <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-copy-properties" role="function">
<title>glade_widget_copy_properties ()</title>
<indexterm zone="glade-widget-copy-properties"><primary>glade_widget_copy_properties</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_copy_properties        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *template_widget);</programlisting>
<para>
Sets properties in <parameter>widget</parameter> based on the values of
matching properties in <parameter>template_widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>   a 'dest' <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>template_widget</parameter>&nbsp;:</term>
<listitem><simpara> a 'src' <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-set-packing-properties" role="function">
<title>glade_widget_set_packing_properties ()</title>
<indexterm zone="glade-widget-set-packing-properties"><primary>glade_widget_set_packing_properties</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_set_packing_properties (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *container);</programlisting>
<para>
Generates the packing_properties list of the widget, given
the class of the container we are adding the widget to.
If the widget already has packing_properties, but the container
has changed, the current list is freed and replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>     A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>  The parent <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-get-property" role="function">
<title>glade_widget_get_property ()</title>
<indexterm zone="glade-widget-get-property"><primary>glade_widget_get_property</primary></indexterm><programlisting><link linkend="GladeProperty">GladeProperty</link>*      glade_widget_get_property           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="GladeProperty"><type>GladeProperty</type></link> in <parameter>widget</parameter> named <parameter>id_property</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-get-pack-property" role="function">
<title>glade_widget_get_pack_property ()</title>
<indexterm zone="glade-widget-get-pack-property"><primary>glade_widget_get_pack_property</primary></indexterm><programlisting><link linkend="GladeProperty">GladeProperty</link>*      glade_widget_get_pack_property      (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="GladeProperty"><type>GladeProperty</type></link> in <parameter>widget</parameter> named <parameter>id_property</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-dup-properties" role="function">
<title>glade_widget_dup_properties ()</title>
<indexterm zone="glade-widget-dup-properties"><primary>glade_widget_dup_properties</primary></indexterm><programlisting><link linkend="GList">GList</link>*              glade_widget_dup_properties         (<link linkend="GList">GList</link> *template_props,
                                                         <link linkend="gboolean">gboolean</link> as_load);</programlisting>
<para>
Copies a list of properties, if <parameter>as_load</parameter> is specified, then
properties that are not saved to the glade file are ignored.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>template_props</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeProperty"><type>GladeProperty</type></link> list to copy
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>as_load</parameter>&nbsp;:</term>
<listitem><simpara> whether to behave as if loading the project
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A newly allocated <link linkend="GList"><type>GList</type></link> of new <link linkend="GladeProperty"><type>GladeProperty</type></link> objects.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-remove-property" role="function">
<title>glade_widget_remove_property ()</title>
<indexterm zone="glade-widget-remove-property"><primary>glade_widget_remove_property</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_remove_property        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);</programlisting>
<para>
Removes the <link linkend="GladeProperty"><type>GladeProperty</type></link> indicated by <parameter>id_property</parameter>
from <parameter>widget</parameter> (this is intended for use in the plugin, to
remove properties from composite children that dont make
sence to allow the user to specify, notably - properties
that are proxied through the composite widget's properties or
style properties).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> the name of the property
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-show" role="function">
<title>glade_widget_show ()</title>
<indexterm zone="glade-widget-show"><primary>glade_widget_show</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_show                   (<link linkend="GladeWidget">GladeWidget</link> *widget);</programlisting>
<para>
Display <parameter>widget</parameter> in it's project's GladeDesignView</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-hide" role="function">
<title>glade_widget_hide ()</title>
<indexterm zone="glade-widget-hide"><primary>glade_widget_hide</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_hide                   (<link linkend="GladeWidget">GladeWidget</link> *widget);</programlisting>
<para>
Hide <parameter>widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-add-signal-handler" role="function">
<title>glade_widget_add_signal_handler ()</title>
<indexterm zone="glade-widget-add-signal-handler"><primary>glade_widget_add_signal_handler</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_add_signal_handler     (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeSignal">GladeSignal</link> *signal_handler);</programlisting>
<para>
Adds a signal handler for <parameter>widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signal_handler</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GladeSignal"><type>GladeSignal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-remove-signal-handler" role="function">
<title>glade_widget_remove_signal_handler ()</title>
<indexterm zone="glade-widget-remove-signal-handler"><primary>glade_widget_remove_signal_handler</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_remove_signal_handler  (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeSignal">GladeSignal</link> *signal_handler);</programlisting>
<para>
Removes a signal handler from <parameter>widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signal_handler</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GladeSignal"><type>GladeSignal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-change-signal-handler" role="function">
<title>glade_widget_change_signal_handler ()</title>
<indexterm zone="glade-widget-change-signal-handler"><primary>glade_widget_change_signal_handler</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_change_signal_handler  (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeSignal">GladeSignal</link> *old_signal_handler,
                                                         <link linkend="GladeSignal">GladeSignal</link> *new_signal_handler);</programlisting>
<para>
Changes a <link linkend="GladeSignal"><type>GladeSignal</type></link> on <parameter>widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old_signal_handler</parameter>&nbsp;:</term>
<listitem><simpara> the old <link linkend="GladeSignal"><type>GladeSignal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_signal_handler</parameter>&nbsp;:</term>
<listitem><simpara> the new <link linkend="GladeSignal"><type>GladeSignal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-list-signal-handlers" role="function">
<title>glade_widget_list_signal_handlers ()</title>
<indexterm zone="glade-widget-list-signal-handlers"><primary>glade_widget_list_signal_handlers</primary></indexterm><programlisting><link linkend="GPtrArray">GPtrArray</link>*          glade_widget_list_signal_handlers   (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *signal_name);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signal_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the signal
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="GPtrArray"><type>GPtrArray</type></link> of <link linkend="GladeSignal"><type>GladeSignal</type></link> for <parameter>signal_name</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-has-decendant" role="function">
<title>glade_widget_has_decendant ()</title>
<indexterm zone="glade-widget-has-decendant"><primary>glade_widget_has_decendant</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_has_decendant          (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GType">GType</link> type);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> a  <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether this GladeWidget has any decendants of type <parameter>type</parameter>
         or any decendants that implement the <parameter>type</parameter> interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-event" role="function">
<title>glade_widget_event ()</title>
<indexterm zone="glade-widget-event"><primary>glade_widget_event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_event                  (<link linkend="GladeWidget">GladeWidget</link> *gwidget,
                                                         <link linkend="GdkEvent">GdkEvent</link> *event);</programlisting>
<para>
Feed an event to be handled on the project GladeWidget
hierarchy.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gwidget</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GdkEvent"><type>GdkEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>whether the event was handled or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-placeholder-relation" role="function">
<title>glade_widget_placeholder_relation ()</title>
<indexterm zone="glade-widget-placeholder-relation"><primary>glade_widget_placeholder_relation</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_placeholder_relation   (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GladeWidget">GladeWidget</link> *widget);</programlisting>
<para>
Returns whether placeholders should be used
in operations concerning this parent &amp; child.
</para>
<para>
Currently that criteria is whether <parameter>parent</parameter> is a
GtkContainer, <parameter>widget</parameter> is a GtkWidget and the parent
adaptor has been marked to use placeholders.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> The child <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether to use placeholders for this relationship.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-get-action" role="function">
<title>glade_widget_get_action ()</title>
<indexterm zone="glade-widget-get-action"><primary>glade_widget_get_action</primary></indexterm><programlisting><link linkend="GladeWidgetAction">GladeWidgetAction</link>*  glade_widget_get_action             (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path);</programlisting>
<para>
Returns a <link linkend="GladeWidgetAction"><type>GladeWidgetAction</type></link> object indentified by <parameter>action_path</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> a full action path including groups
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the action or NULL if not found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-get-pack-action" role="function">
<title>glade_widget_get_pack_action ()</title>
<indexterm zone="glade-widget-get-pack-action"><primary>glade_widget_get_pack_action</primary></indexterm><programlisting><link linkend="GladeWidgetAction">GladeWidgetAction</link>*  glade_widget_get_pack_action        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path);</programlisting>
<para>
Returns a <link linkend="GladeWidgetAction"><type>GladeWidgetAction</type></link> object indentified by <parameter>action_path</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> a full action path including groups
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the action or NULL if not found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-set-action-sensitive" role="function">
<title>glade_widget_set_action_sensitive ()</title>
<indexterm zone="glade-widget-set-action-sensitive"><primary>glade_widget_set_action_sensitive</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_set_action_sensitive   (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path,
                                                         <link linkend="gboolean">gboolean</link> sensitive);</programlisting>
<para>
Sets the sensitivity of <parameter>action_path</parameter> in <parameter>widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> a full action path including groups
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sensitive</parameter>&nbsp;:</term>
<listitem><simpara> setting sensitive or insensitive
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>action_path</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-set-pack-action-sensitive" role="function">
<title>glade_widget_set_pack_action_sensitive ()</title>
<indexterm zone="glade-widget-set-pack-action-sensitive"><primary>glade_widget_set_pack_action_sensitive</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_set_pack_action_sensitive
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path,
                                                         <link linkend="gboolean">gboolean</link> sensitive);</programlisting>
<para>
Sets the sensitivity of <parameter>action_path</parameter> in <parameter>widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> a full action path including groups
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sensitive</parameter>&nbsp;:</term>
<listitem><simpara> setting sensitive or insensitive
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>action_path</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-remove-action" role="function">
<title>glade_widget_remove_action ()</title>
<indexterm zone="glade-widget-remove-action"><primary>glade_widget_remove_action</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_remove_action          (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path);</programlisting>
<para>
Remove an action.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> a full action path including groups
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-remove-pack-action" role="function">
<title>glade_widget_remove_pack_action ()</title>
<indexterm zone="glade-widget-remove-pack-action"><primary>glade_widget_remove_pack_action</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_remove_pack_action     (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path);</programlisting>
<para>
Remove a packing action.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> a full action path including groups
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-create-action-menu" role="function">
<title>glade_widget_create_action_menu ()</title>
<indexterm zone="glade-widget-create-action-menu"><primary>glade_widget_create_action_menu</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*          glade_widget_create_action_menu     (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *action_path);</programlisting>
<para>
Create a new GtkMenu with every action in it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> an action path or NULL to include every <parameter>widget</parameter> action.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-project-notify" role="function">
<title>glade_widget_project_notify ()</title>
<indexterm zone="glade-widget-project-notify"><primary>glade_widget_project_notify</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_project_notify         (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeProject">GladeProject</link> *project);</programlisting>
<para>
Notifies <parameter>widget</parameter> that it is now in <parameter>project</parameter>.
</para>
<para>
Note that this doesnt really set the project; the project is saved
for internal reasons even when the widget is on the clipboard.
(also used for property references).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>project</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GladeProject"><type>GladeProject</type></link> (or <link linkend="NULL:CAPS"><literal>NULL</literal></link>)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-add-prop-ref" role="function">
<title>glade_widget_add_prop_ref ()</title>
<indexterm zone="glade-widget-add-prop-ref"><primary>glade_widget_add_prop_ref</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_add_prop_ref           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeProperty">GladeProperty</link> *property);</programlisting>
<para>
Adds <parameter>property</parameter> to <parameter>widget</parameter> 's list of referenced properties.
</para>
<para>
Note: this is used to track object reference properties that
      go in and out of the project.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-remove-prop-ref" role="function">
<title>glade_widget_remove_prop_ref ()</title>
<indexterm zone="glade-widget-remove-prop-ref"><primary>glade_widget_remove_prop_ref</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_remove_prop_ref        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeProperty">GladeProperty</link> *property);</programlisting>
<para>
Removes <parameter>property</parameter> from <parameter>widget</parameter> 's list of referenced properties.
</para>
<para>
Note: this is used to track object reference properties that
      go in and out of the project.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-object-set-property" role="function">
<title>glade_widget_object_set_property ()</title>
<indexterm zone="glade-widget-object-set-property"><primary>glade_widget_object_set_property</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_object_set_property    (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
This function applies <parameter>value</parameter> to the property <parameter>property_name</parameter> on
the runtime object of <parameter>widget</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>        A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property identifier
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>         The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-object-get-property" role="function">
<title>glade_widget_object_get_property ()</title>
<indexterm zone="glade-widget-object-get-property"><primary>glade_widget_object_get_property</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_object_get_property    (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
This function retrieves the value of the property <parameter>property_name</parameter> on
the runtime object of <parameter>widget</parameter> and sets it in <parameter>value</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>        A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property identifier
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>         The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-child-set-property" role="function">
<title>glade_widget_child_set_property ()</title>
<indexterm zone="glade-widget-child-set-property"><primary>glade_widget_child_set_property</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_child_set_property     (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Sets <parameter>child</parameter>'s packing property identified by <parameter>property_name</parameter> to <parameter>value</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>        A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>         The <link linkend="GladeWidget"><type>GladeWidget</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The id of the property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>         The <parameter>GValue</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-child-get-property" role="function">
<title>glade_widget_child_get_property ()</title>
<indexterm zone="glade-widget-child-get-property"><primary>glade_widget_child_get_property</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_child_get_property     (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Gets <parameter>child</parameter>'s packing property identified by <parameter>property_name</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>        A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>         The <link linkend="GladeWidget"><type>GladeWidget</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The id of the property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>         The <parameter>GValue</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-property-get" role="function">
<title>glade_widget_property_get ()</title>
<indexterm zone="glade-widget-property-get"><primary>glade_widget_property_get</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_property_get           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         ...);</programlisting>
<para>
Gets the value of <parameter>id_property</parameter> in <parameter>widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> The return location for the value of the said <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-property-set" role="function">
<title>glade_widget_property_set ()</title>
<indexterm zone="glade-widget-property-set"><primary>glade_widget_property_set</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_property_set           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         ...);</programlisting>
<para>
Sets the value of <parameter>id_property</parameter> in <parameter>widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> A value of the correct type for the said <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-pack-property-get" role="function">
<title>glade_widget_pack_property_get ()</title>
<indexterm zone="glade-widget-pack-property-get"><primary>glade_widget_pack_property_get</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_pack_property_get      (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         ...);</programlisting>
<para>
Gets the value of <parameter>id_property</parameter> in <parameter>widget</parameter> packing properties</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> The return location for the value of the said <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-pack-property-set" role="function">
<title>glade_widget_pack_property_set ()</title>
<indexterm zone="glade-widget-pack-property-set"><primary>glade_widget_pack_property_set</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_pack_property_set      (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         ...);</programlisting>
<para>
Sets the value of <parameter>id_property</parameter> in <parameter>widget</parameter> packing properties</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> The return location for the value of the said <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-property-reset" role="function">
<title>glade_widget_property_reset ()</title>
<indexterm zone="glade-widget-property-reset"><primary>glade_widget_property_reset</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_property_reset         (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);</programlisting>
<para>
Resets <parameter>id_property</parameter> in <parameter>widget</parameter> to it's default value</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-pack-property-reset" role="function">
<title>glade_widget_pack_property_reset ()</title>
<indexterm zone="glade-widget-pack-property-reset"><primary>glade_widget_pack_property_reset</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_pack_property_reset    (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);</programlisting>
<para>
Resets <parameter>id_property</parameter> in <parameter>widget</parameter>'s packing properties to it's default value</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-property-default" role="function">
<title>glade_widget_property_default ()</title>
<indexterm zone="glade-widget-property-default"><primary>glade_widget_property_default</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_property_default       (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether whether <parameter>id_property</parameter> was found and is 
currently set to it's default value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-property-original-default" role="function">
<title>glade_widget_property_original_default ()</title>
<indexterm zone="glade-widget-property-original-default"><primary>glade_widget_property_original_default</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_property_original_default
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether whether <parameter>id_property</parameter> was found and is 
currently set to it's original default value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-pack-property-default" role="function">
<title>glade_widget_pack_property_default ()</title>
<indexterm zone="glade-widget-pack-property-default"><primary>glade_widget_pack_property_default</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_pack_property_default  (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether whether <parameter>id_property</parameter> was found and is 
currently set to it's default value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-property-set-sensitive" role="function">
<title>glade_widget_property_set_sensitive ()</title>
<indexterm zone="glade-widget-property-set-sensitive"><primary>glade_widget_property_set_sensitive</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_property_set_sensitive (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> sensitive,
                                                         const <link linkend="gchar">gchar</link> *reason);</programlisting>
<para>
Sets the sensitivity of <parameter>id_property</parameter> in <parameter>widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sensitive</parameter>&nbsp;:</term>
<listitem><simpara> setting sensitive or insensitive
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara> a description of why the user cant edit this property
         which will be used as a tooltip
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-pack-property-set-sensitive" role="function">
<title>glade_widget_pack_property_set_sensitive ()</title>
<indexterm zone="glade-widget-pack-property-set-sensitive"><primary>glade_widget_pack_property_set_sensitive</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_pack_property_set_sensitive
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> sensitive,
                                                         const <link linkend="gchar">gchar</link> *reason);</programlisting>
<para>
Sets the sensitivity of <parameter>id_property</parameter> in <parameter>widget</parameter>'s packing properties.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sensitive</parameter>&nbsp;:</term>
<listitem><simpara> setting sensitive or insensitive
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara> a description of why the user cant edit this property
         which will be used as a tooltip
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-property-set-enabled" role="function">
<title>glade_widget_property_set_enabled ()</title>
<indexterm zone="glade-widget-property-set-enabled"><primary>glade_widget_property_set_enabled</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_property_set_enabled   (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> enabled);</programlisting>
<para>
Sets the enabled state of <parameter>id_property</parameter> in <parameter>widget</parameter>; this is
used for optional properties.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>enabled</parameter>&nbsp;:</term>
<listitem><simpara> setting enabled or disabled
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-pack-property-set-enabled" role="function">
<title>glade_widget_pack_property_set_enabled ()</title>
<indexterm zone="glade-widget-pack-property-set-enabled"><primary>glade_widget_pack_property_set_enabled</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_pack_property_set_enabled
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> enabled);</programlisting>
<para>
Sets the enabled state of <parameter>id_property</parameter> in <parameter>widget</parameter>'s packing 
properties; this is used for optional properties.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>enabled</parameter>&nbsp;:</term>
<listitem><simpara> setting enabled or disabled
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-property-set-save-always" role="function">
<title>glade_widget_property_set_save_always ()</title>
<indexterm zone="glade-widget-property-set-save-always"><primary>glade_widget_property_set_save_always</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_property_set_save_always
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> setting);</programlisting>
<para>
Sets whether <parameter>id_property</parameter> in <parameter>widget</parameter> should be special cased
to always be saved regardless of its default value.
(used for some special cases like properties
that are assigned initial values in composite widgets
or derived widget code).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>setting</parameter>&nbsp;:</term>
<listitem><simpara> the setting 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-pack-property-set-save-always" role="function">
<title>glade_widget_pack_property_set_save_always ()</title>
<indexterm zone="glade-widget-pack-property-set-save-always"><primary>glade_widget_pack_property_set_save_always</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_pack_property_set_save_always
                                                        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         <link linkend="gboolean">gboolean</link> setting);</programlisting>
<para>
Sets whether <parameter>id_property</parameter> in <parameter>widget</parameter> should be special cased
to always be saved regardless of its default value.
(used for some special cases like properties
that are assigned initial values in composite widgets
or derived widget code).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>setting</parameter>&nbsp;:</term>
<listitem><simpara> the setting 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>id_property</parameter> was found or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-property-string" role="function">
<title>glade_widget_property_string ()</title>
<indexterm zone="glade-widget-property-string"><primary>glade_widget_property_string</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              glade_widget_property_string        (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Creates a printable string representing <parameter>id_property</parameter> in
<parameter>widget</parameter>, if <parameter>value</parameter> is specified it will be used in place
of <parameter>id_property</parameter>'s real value (this is a convinience
function to print/debug properties usually from plugin
backends).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GValue"><type>GValue</type></link> to print or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A newly allocated string representing <parameter>id_property</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-pack-property-string" role="function">
<title>glade_widget_pack_property_string ()</title>
<indexterm zone="glade-widget-pack-property-string"><primary>glade_widget_pack_property_string</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              glade_widget_pack_property_string   (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *id_property,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Same as <link linkend="glade-widget-property-string"><function>glade_widget_property_string()</function></link> but for packing
properties.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_property</parameter>&nbsp;:</term>
<listitem><simpara> a string naming a <link linkend="GladeProperty"><type>GladeProperty</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GValue"><type>GValue</type></link> to print or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A newly allocated string representing <parameter>id_property</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-set-name" role="function">
<title>glade_widget_set_name ()</title>
<indexterm zone="glade-widget-set-name"><primary>glade_widget_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_set_name               (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Sets <parameter>widget</parameter>'s name to <parameter>name</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-get-name" role="function">
<title>glade_widget_get_name ()</title>
<indexterm zone="glade-widget-get-name"><primary>glade_widget_get_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        glade_widget_get_name               (<link linkend="GladeWidget">GladeWidget</link> *widget);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a pointer to <parameter>widget</parameter>'s name
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-set-internal" role="function">
<title>glade_widget_set_internal ()</title>
<indexterm zone="glade-widget-set-internal"><primary>glade_widget_set_internal</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_set_internal           (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *internal);</programlisting>
<para>
Sets the internal name of <parameter>widget</parameter> to <parameter>internal</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>internal</parameter>&nbsp;:</term>
<listitem><simpara> The internal name
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-get-internal" role="function">
<title>glade_widget_get_internal ()</title>
<indexterm zone="glade-widget-get-internal"><primary>glade_widget_get_internal</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        glade_widget_get_internal           (<link linkend="GladeWidget">GladeWidget</link> *widget);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the internal name of <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-set-object" role="function">
<title>glade_widget_set_object ()</title>
<indexterm zone="glade-widget-set-object"><primary>glade_widget_set_object</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_set_object             (<link linkend="GladeWidget">GladeWidget</link> *gwidget,
                                                         <link linkend="GObject">GObject</link> *new_object);</programlisting>
<para>
Set the runtime object for this GladeWidget wrapper
(this is used deep in the core and is probably unsafe
to use elsewhere).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gwidget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_object</parameter>&nbsp;:</term>
<listitem><simpara> the new <link linkend="GObject"><type>GObject</type></link> for <parameter>gwidget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-get-object" role="function">
<title>glade_widget_get_object ()</title>
<indexterm zone="glade-widget-get-object"><primary>glade_widget_get_object</primary></indexterm><programlisting><link linkend="GObject">GObject</link>*            glade_widget_get_object             (<link linkend="GladeWidget">GladeWidget</link> *widget);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="GObject"><type>GObject</type></link> associated with <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-set-project" role="function">
<title>glade_widget_set_project ()</title>
<indexterm zone="glade-widget-set-project"><primary>glade_widget_set_project</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_set_project            (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeProject">GladeProject</link> *project);</programlisting>
<para>
Makes <parameter>widget</parameter> belong to <parameter>project</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>project</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeProject"><type>GladeProject</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-get-project" role="function">
<title>glade_widget_get_project ()</title>
<indexterm zone="glade-widget-get-project"><primary>glade_widget_get_project</primary></indexterm><programlisting><link linkend="GladeProject">GladeProject</link>*       glade_widget_get_project            (<link linkend="GladeWidget">GladeWidget</link> *widget);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="GladeProject"><type>GladeProject</type></link> that <parameter>widget</parameter> belongs to
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-get-adaptor" role="function">
<title>glade_widget_get_adaptor ()</title>
<indexterm zone="glade-widget-get-adaptor"><primary>glade_widget_get_adaptor</primary></indexterm><programlisting><link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link>* glade_widget_get_adaptor            (<link linkend="GladeWidget">GladeWidget</link> *widget);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link> of <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-get-parent" role="function">
<title>glade_widget_get_parent ()</title>
<indexterm zone="glade-widget-get-parent"><primary>glade_widget_get_parent</primary></indexterm><programlisting><link linkend="GladeWidget">GladeWidget</link>*        glade_widget_get_parent             (<link linkend="GladeWidget">GladeWidget</link> *widget);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The parenting <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-set-parent" role="function">
<title>glade_widget_set_parent ()</title>
<indexterm zone="glade-widget-set-parent"><primary>glade_widget_set_parent</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_set_parent             (<link linkend="GladeWidget">GladeWidget</link> *widget,
                                                         <link linkend="GladeWidget">GladeWidget</link> *parent);</programlisting>
<para>
sets the parenting <link linkend="GladeWidget"><type>GladeWidget</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidget"><type>GladeWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> the parenting <link linkend="GladeWidget"><type>GladeWidget</type></link> (or <link linkend="NULL:CAPS"><literal>NULL</literal></link>)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-superuser" role="function">
<title>glade_widget_superuser ()</title>
<indexterm zone="glade-widget-superuser"><primary>glade_widget_superuser</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_superuser              (void);</programlisting>
<para>
Checks if we are in superuser mode.
</para>
<para>
Superuser mode is when we are
  - Loading a project
  - Dupping a widget recursively
  - Rebuilding an instance for a construct-only property
</para>
<para>
In these cases, we must act like a load, this should be checked
from the plugin when implementing containers, when undo/redo comes
around, the plugin is responsable for maintaining the same container
size when widgets are added/removed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-push-superuser" role="function">
<title>glade_widget_push_superuser ()</title>
<indexterm zone="glade-widget-push-superuser"><primary>glade_widget_push_superuser</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_push_superuser         (void);</programlisting>
<para>
Sets superuser mode</para>
<para>

</para></refsect2>
<refsect2 id="glade-widget-pop-superuser" role="function">
<title>glade_widget_pop_superuser ()</title>
<indexterm zone="glade-widget-pop-superuser"><primary>glade_widget_pop_superuser</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_pop_superuser          (void);</programlisting>
<para>
Unsets superuser mode</para>
<para>

</para></refsect2>

</refsect1>
<refsect1 id="GladeWidget.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GladeWidget--adaptor"><title>The <literal>&quot;adaptor&quot;</literal> property</title>
<indexterm zone="GladeWidget--adaptor"><primary>GladeWidget:adaptor</primary></indexterm><programlisting>  &quot;adaptor&quot;                  <link linkend="GladeGObjectAdaptor">GladeGObjectAdaptor</link>*  : Read / Write / Construct Only</programlisting>
<para>The class adaptor for the associated widget.</para></refsect2>
<refsect2 id="GladeWidget--anarchist"><title>The <literal>&quot;anarchist&quot;</literal> property</title>
<indexterm zone="GladeWidget--anarchist"><primary>GladeWidget:anarchist</primary></indexterm><programlisting>  &quot;anarchist&quot;                <link linkend="gboolean">gboolean</link>              : Read / Write / Construct Only</programlisting>
<para>Whether this composite child is an ancestral child or an anarchist child.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GladeWidget--info"><title>The <literal>&quot;info&quot;</literal> property</title>
<indexterm zone="GladeWidget--info"><primary>GladeWidget:info</primary></indexterm><programlisting>  &quot;info&quot;                     <link linkend="gpointer">gpointer</link>              : Write / Construct Only</programlisting>
<para>A GladeWidgetInfo struct to base a new widget on.</para></refsect2>
<refsect2 id="GladeWidget--internal"><title>The <literal>&quot;internal&quot;</literal> property</title>
<indexterm zone="GladeWidget--internal"><primary>GladeWidget:internal</primary></indexterm><programlisting>  &quot;internal&quot;                 <link linkend="gchar">gchar</link>*                : Read / Write / Construct</programlisting>
<para>The internal name of the widget.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="GladeWidget--internal-name"><title>The <literal>&quot;internal-name&quot;</literal> property</title>
<indexterm zone="GladeWidget--internal-name"><primary>GladeWidget:internal-name</primary></indexterm><programlisting>  &quot;internal-name&quot;            <link linkend="gchar">gchar</link>*                : Write / Construct Only</programlisting>
<para>A generic name prefix for internal widgets.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="GladeWidget--name"><title>The <literal>&quot;name&quot;</literal> property</title>
<indexterm zone="GladeWidget--name"><primary>GladeWidget:name</primary></indexterm><programlisting>  &quot;name&quot;                     <link linkend="gchar">gchar</link>*                : Read / Write / Construct</programlisting>
<para>The name of the widget.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="GladeWidget--object"><title>The <literal>&quot;object&quot;</literal> property</title>
<indexterm zone="GladeWidget--object"><primary>GladeWidget:object</primary></indexterm><programlisting>  &quot;object&quot;                   <link linkend="GObject">GObject</link>*              : Read / Write / Construct</programlisting>
<para>The object associated.</para></refsect2>
<refsect2 id="GladeWidget--parent"><title>The <literal>&quot;parent&quot;</literal> property</title>
<indexterm zone="GladeWidget--parent"><primary>GladeWidget:parent</primary></indexterm><programlisting>  &quot;parent&quot;                   <link linkend="GladeWidget">GladeWidget</link>*          : Read / Write / Construct</programlisting>
<para>A pointer to the parenting GladeWidget.</para></refsect2>
<refsect2 id="GladeWidget--project"><title>The <literal>&quot;project&quot;</literal> property</title>
<indexterm zone="GladeWidget--project"><primary>GladeWidget:project</primary></indexterm><programlisting>  &quot;project&quot;                  <link linkend="GladeProject">GladeProject</link>*         : Read / Write / Construct</programlisting>
<para>The glade project that this widget belongs to.</para></refsect2>
<refsect2 id="GladeWidget--properties"><title>The <literal>&quot;properties&quot;</literal> property</title>
<indexterm zone="GladeWidget--properties"><primary>GladeWidget:properties</primary></indexterm><programlisting>  &quot;properties&quot;               <link linkend="gpointer">gpointer</link>              : Read / Write / Construct Only</programlisting>
<para>A list of GladeProperties.</para></refsect2>
<refsect2 id="GladeWidget--reason"><title>The <literal>&quot;reason&quot;</literal> property</title>
<indexterm zone="GladeWidget--reason"><primary>GladeWidget:reason</primary></indexterm><programlisting>  &quot;reason&quot;                   <link linkend="gint">gint</link>                  : Write / Construct Only</programlisting>
<para>A GladeCreateReason for this creation.</para><para>Allowed values: [0,3]</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="GladeWidget--template"><title>The <literal>&quot;template&quot;</literal> property</title>
<indexterm zone="GladeWidget--template"><primary>GladeWidget:template</primary></indexterm><programlisting>  &quot;template&quot;                 <link linkend="GladeWidget">GladeWidget</link>*          : Write / Construct Only</programlisting>
<para>A GladeWidget template to base a new widget on.</para></refsect2>
<refsect2 id="GladeWidget--toplevel-height"><title>The <literal>&quot;toplevel-height&quot;</literal> property</title>
<indexterm zone="GladeWidget--toplevel-height"><primary>GladeWidget:toplevel-height</primary></indexterm><programlisting>  &quot;toplevel-height&quot;          <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>The height of the widget when toplevel in the GladeDesignLayout.</para><para>Allowed values: &gt;= G_MAXULONG</para>
<para>Default value: -1</para>
</refsect2>
<refsect2 id="GladeWidget--toplevel-width"><title>The <literal>&quot;toplevel-width&quot;</literal> property</title>
<indexterm zone="GladeWidget--toplevel-width"><primary>GladeWidget:toplevel-width</primary></indexterm><programlisting>  &quot;toplevel-width&quot;           <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>The width of the widget when toplevel in the GladeDesignLayout.</para><para>Allowed values: &gt;= G_MAXULONG</para>
<para>Default value: -1</para>
</refsect2>

</refsect1>

<refsect1 id="GladeWidget.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="GladeWidget-add-signal-handler"><title>The <literal>&quot;add-signal-handler&quot;</literal> signal</title>
<indexterm zone="GladeWidget-add-signal-handler"><primary>GladeWidget::add-signal-handler</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GladeWidget">GladeWidget</link> *gladewidget,
                                                        <link linkend="gpointer">gpointer</link>     arg1,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gladewidget</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeWidget"><type>GladeWidget</type></link> which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeSignal"><type>GladeSignal</type></link> that was added to <parameter>gladewidget</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GladeWidget-button-press-event"><title>The <literal>&quot;button-press-event&quot;</literal> signal</title>
<indexterm zone="GladeWidget-button-press-event"><primary>GladeWidget::button-press-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GladeWidget">GladeWidget</link>    *gladewidget,
                                                        <link linkend="GdkEventButton">GdkEventButton</link> *arg1,
                                                        <link linkend="gpointer">gpointer</link>        user_data)        : Run Last</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gladewidget</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeWidget"><type>GladeWidget</type></link> which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GdkEvent"><type>GdkEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GladeWidget-button-release-event"><title>The <literal>&quot;button-release-event&quot;</literal> signal</title>
<indexterm zone="GladeWidget-button-release-event"><primary>GladeWidget::button-release-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GladeWidget">GladeWidget</link>    *gladewidget,
                                                        <link linkend="GdkEventButton">GdkEventButton</link> *event,
                                                        <link linkend="gpointer">gpointer</link>        user_data)        : Run Last</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gladewidget</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>

</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GladeWidget-change-signal-handler"><title>The <literal>&quot;change-signal-handler&quot;</literal> signal</title>
<indexterm zone="GladeWidget-change-signal-handler"><primary>GladeWidget::change-signal-handler</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GladeWidget">GladeWidget</link> *gladewidget,
                                                        <link linkend="gpointer">gpointer</link>     arg1,
                                                        <link linkend="gpointer">gpointer</link>     arg2,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gladewidget</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeWidget"><type>GladeWidget</type></link> which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara> the old <link linkend="GladeSignal"><type>GladeSignal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&nbsp;:</term>
<listitem><simpara> the new <link linkend="GladeSignal"><type>GladeSignal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GladeWidget-motion-notify-event"><title>The <literal>&quot;motion-notify-event&quot;</literal> signal</title>
<indexterm zone="GladeWidget-motion-notify-event"><primary>GladeWidget::motion-notify-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GladeWidget">GladeWidget</link>    *gladewidget,
                                                        <link linkend="GdkEventMotion">GdkEventMotion</link> *arg1,
                                                        <link linkend="gpointer">gpointer</link>        user_data)        : Run Last</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gladewidget</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeWidget"><type>GladeWidget</type></link> which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GdkEvent"><type>GdkEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GladeWidget-remove-signal-handler"><title>The <literal>&quot;remove-signal-handler&quot;</literal> signal</title>
<indexterm zone="GladeWidget-remove-signal-handler"><primary>GladeWidget::remove-signal-handler</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GladeWidget">GladeWidget</link> *gladewidget,
                                                        <link linkend="gpointer">gpointer</link>     arg1,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gladewidget</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeWidget"><type>GladeWidget</type></link> which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GladeSignal"><type>GladeSignal</type></link> that was removed from <parameter>gladewidget</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
