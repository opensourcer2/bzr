<refentry id="gladeui-GladeWidgetAdaptor">
<refmeta>
<refentrytitle role="top_of_page" id="gladeui-GladeWidgetAdaptor.top_of_page">GladeWidgetAdaptor</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GLADEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GladeWidgetAdaptor</refname>
<refpurpose>Adaptor base class to add runtime support for each widget class.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="gladeui-GladeWidgetAdaptor.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="GladeWidgetAdaptorPrivate">GladeWidgetAdaptorPrivate</link>;
#define             <link linkend="GWA-IS-FIXED:CAPS">GWA_IS_FIXED</link>                        (obj)
#define             <link linkend="GWA-IS-TOPLEVEL:CAPS">GWA_IS_TOPLEVEL</link>                     (obj)
#define             <link linkend="GWA-USE-PLACEHOLDERS:CAPS">GWA_USE_PLACEHOLDERS</link>                (obj)
#define             <link linkend="GWA-DEFAULT-WIDTH:CAPS">GWA_DEFAULT_WIDTH</link>                   (obj)
#define             <link linkend="GWA-DEFAULT-HEIGHT:CAPS">GWA_DEFAULT_HEIGHT</link>                  (obj)
#define             <link linkend="GWA-GET-CLASS:CAPS">GWA_GET_CLASS</link>                       (type)
#define             <link linkend="GWA-GET-OCLASS:CAPS">GWA_GET_OCLASS</link>                      (type)
#define             <link linkend="GLADE-VALID-CREATE-REASON:CAPS">GLADE_VALID_CREATE_REASON</link>           (reason)
enum                <link linkend="GladeCreateReason">GladeCreateReason</link>;
#define             <link linkend="GLADE-TYPE-CREATE-REASON:CAPS">GLADE_TYPE_CREATE_REASON</link>
<link linkend="void">void</link>                (<link linkend="GladeSetPropertyFunc">*GladeSetPropertyFunc</link>)             (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                (<link linkend="GladeGetPropertyFunc">*GladeGetPropertyFunc</link>)             (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);
<link linkend="gboolean">gboolean</link>            (<link linkend="GladeVerifyPropertyFunc">*GladeVerifyPropertyFunc</link>)          (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                (<link linkend="GladeChildSetPropertyFunc">*GladeChildSetPropertyFunc</link>)        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                (<link linkend="GladeChildGetPropertyFunc">*GladeChildGetPropertyFunc</link>)        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);
<link linkend="gboolean">gboolean</link>            (<link linkend="GladeChildVerifyPropertyFunc">*GladeChildVerifyPropertyFunc</link>)     (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="GList">GList</link>*              (<link linkend="GladeGetChildrenFunc">*GladeGetChildrenFunc</link>)             (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container);
<link linkend="void">void</link>                (<link linkend="GladeAddChildFunc">*GladeAddChildFunc</link>)                (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *parent,
                                                         <link linkend="GObject">GObject</link> *child);
<link linkend="void">void</link>                (<link linkend="GladeRemoveChildFunc">*GladeRemoveChildFunc</link>)             (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *parent,
                                                         <link linkend="GObject">GObject</link> *child);
<link linkend="void">void</link>                (<link linkend="GladeReplaceChildFunc">*GladeReplaceChildFunc</link>)            (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *old_obj,
                                                         <link linkend="GObject">GObject</link> *new_obj);
<link linkend="void">void</link>                (<link linkend="GladePostCreateFunc">*GladePostCreateFunc</link>)              (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GladeCreateReason">GladeCreateReason</link> reason);
<link linkend="GObject">GObject</link>*            (<link linkend="GladeGetInternalFunc">*GladeGetInternalFunc</link>)             (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *parent,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="void">void</link>                (<link linkend="GladeActionActivateFunc">*GladeActionActivateFunc</link>)          (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *action_path);
<link linkend="void">void</link>                (<link linkend="GladeChildActionActivateFunc">*GladeChildActionActivateFunc</link>)     (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *action_path);
                    <link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link>;
#define             <link linkend="glade-widget-adaptor-create-widget">glade_widget_adaptor_create_widget</link>  (adaptor, query, ...)
#define             <link linkend="glade-widget-adaptor-from-pclass">glade_widget_adaptor_from_pclass</link>    (pclass)
#define             <link linkend="glade-widget-adaptor-from-pspec">glade_widget_adaptor_from_pspec</link>     (pspec)
<link linkend="GType">GType</link>               <link linkend="glade-create-reason-get-type">glade_create_reason_get_type</link>        (void);
<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link>* <link linkend="glade-widget-adaptor-from-catalog">glade_widget_adaptor_from_catalog</link>   (<link linkend="GladeXmlNode">GladeXmlNode</link> *class_node,
                                                         const <link linkend="gchar">gchar</link> *catname,
                                                         const <link linkend="gchar">gchar</link> *icon_prefix,
                                                         <link linkend="GModule">GModule</link> *module,
                                                         const <link linkend="gchar">gchar</link> *domain,
                                                         const <link linkend="gchar">gchar</link> *book);
<link linkend="void">void</link>                <link linkend="glade-widget-adaptor-register">glade_widget_adaptor_register</link>       (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor);
<link linkend="GladeWidget">GladeWidget</link>*        <link linkend="glade-widget-adaptor-create-internal">glade_widget_adaptor_create_internal</link>
                                                        (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GObject">GObject</link> *internal_object,
                                                         const <link linkend="gchar">gchar</link> *internal_name,
                                                         const <link linkend="gchar">gchar</link> *parent_name,
                                                         <link linkend="gboolean">gboolean</link> anarchist,
                                                         <link linkend="GladeCreateReason">GladeCreateReason</link> reason);
<link linkend="GladeWidget">GladeWidget</link>*        <link linkend="glade-widget-adaptor-create-widget-real">glade_widget_adaptor_create_widget_real</link>
                                                        (<link linkend="gboolean">gboolean</link> query,
                                                         const <link linkend="gchar">gchar</link> *first_property,
                                                         ...);
<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link>* <link linkend="glade-widget-adaptor-get-by-name">glade_widget_adaptor_get_by_name</link>    (const <link linkend="gchar">gchar</link> *name);
<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link>* <link linkend="glade-widget-adaptor-get-by-type">glade_widget_adaptor_get_by_type</link>    (<link linkend="GType">GType</link> type);
<link linkend="GladePropertyClass">GladePropertyClass</link>* <link linkend="glade-widget-adaptor-get-property-class">glade_widget_adaptor_get_property_class</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="GladePropertyClass">GladePropertyClass</link>* <link linkend="glade-widget-adaptor-get-pack-property-class">glade_widget_adaptor_get_pack_property_class</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="GParameter">GParameter</link>*         <link linkend="glade-widget-adaptor-default-params">glade_widget_adaptor_default_params</link> (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="gboolean">gboolean</link> construct,
                                                         <link linkend="guint">guint</link> *n_params);
<link linkend="void">void</link>                <link linkend="glade-widget-adaptor-post-create">glade_widget_adaptor_post_create</link>    (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GladeCreateReason">GladeCreateReason</link> reason);
<link linkend="GObject">GObject</link>*            <link linkend="glade-widget-adaptor-get-internal-child">glade_widget_adaptor_get_internal_child</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *internal_name);
<link linkend="void">void</link>                <link linkend="glade-widget-adaptor-set-property">glade_widget_adaptor_set_property</link>   (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="glade-widget-adaptor-get-property">glade_widget_adaptor_get_property</link>   (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-adaptor-verify-property">glade_widget_adaptor_verify_property</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="glade-widget-adaptor-add">glade_widget_adaptor_add</link>            (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child);
<link linkend="void">void</link>                <link linkend="glade-widget-adaptor-remove">glade_widget_adaptor_remove</link>         (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child);
<link linkend="GList">GList</link>*              <link linkend="glade-widget-adaptor-get-children">glade_widget_adaptor_get_children</link>   (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-adaptor-has-child">glade_widget_adaptor_has_child</link>      (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child);
<link linkend="void">void</link>                <link linkend="glade-widget-adaptor-child-set-property">glade_widget_adaptor_child_set_property</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="glade-widget-adaptor-child-get-property">glade_widget_adaptor_child_get_property</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-adaptor-child-verify-property">glade_widget_adaptor_child_verify_property</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="glade-widget-adaptor-replace-child">glade_widget_adaptor_replace_child</link>  (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *old_obj,
                                                         <link linkend="GObject">GObject</link> *new_obj);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-adaptor-query">glade_widget_adaptor_query</link>          (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor);
<link linkend="gchar">gchar</link>*              <link linkend="glade-widget-adaptor-get-packing-default">glade_widget_adaptor_get_packing_default</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *child_adaptor,
                                                         <link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *container_adaptor,
                                                         const <link linkend="gchar">gchar</link> *id);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-adaptor-is-container">glade_widget_adaptor_is_container</link>   (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-adaptor-action-add">glade_widget_adaptor_action_add</link>     (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *action_path,
                                                         const <link linkend="gchar">gchar</link> *label,
                                                         const <link linkend="gchar">gchar</link> *stock,
                                                         <link linkend="gboolean">gboolean</link> important);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-adaptor-pack-action-add">glade_widget_adaptor_pack_action_add</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *action_path,
                                                         const <link linkend="gchar">gchar</link> *label,
                                                         const <link linkend="gchar">gchar</link> *stock,
                                                         <link linkend="gboolean">gboolean</link> important);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-adaptor-action-remove">glade_widget_adaptor_action_remove</link>  (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *action_path);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-widget-adaptor-pack-action-remove">glade_widget_adaptor_pack_action_remove</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *action_path);
<link linkend="GList">GList</link>*              <link linkend="glade-widget-adaptor-pack-actions-new">glade_widget_adaptor_pack_actions_new</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor);
<link linkend="void">void</link>                <link linkend="glade-widget-adaptor-action-activate">glade_widget_adaptor_action_activate</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *action_path);
<link linkend="void">void</link>                <link linkend="glade-widget-adaptor-child-action-activate">glade_widget_adaptor_child_action_activate</link>
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *action_path);
</synopsis>
</refsynopsisdiv>









<refsect1 id="gladeui-GladeWidgetAdaptor.description" role="desc">
<title role="desc.title">Description</title>
<para>
TODO: Add long description.</para>
<para>

</para>
</refsect1>

<refsect1 id="gladeui-GladeWidgetAdaptor.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GladeWidgetAdaptorPrivate" role="struct">
<title>GladeWidgetAdaptorPrivate</title>
<indexterm zone="GladeWidgetAdaptorPrivate"><primary>GladeWidgetAdaptorPrivate</primary></indexterm><programlisting>typedef struct _GladeWidgetAdaptorPrivate GladeWidgetAdaptorPrivate;</programlisting>
<para>

</para></refsect2>
<refsect2 id="GWA-IS-FIXED:CAPS" role="macro">
<title>GWA_IS_FIXED()</title>
<indexterm zone="GWA-IS-FIXED:CAPS"><primary>GWA_IS_FIXED</primary></indexterm><programlisting>#define             GWA_IS_FIXED(obj)</programlisting>
<para>
Checks whether this widget adaptor should be handled 
as a free-form container</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GWA-IS-TOPLEVEL:CAPS" role="macro">
<title>GWA_IS_TOPLEVEL()</title>
<indexterm zone="GWA-IS-TOPLEVEL:CAPS"><primary>GWA_IS_TOPLEVEL</primary></indexterm><programlisting>#define             GWA_IS_TOPLEVEL(obj)</programlisting>
<para>
Checks whether this widget class has been marked as
a toplevel one.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GWA-USE-PLACEHOLDERS:CAPS" role="macro">
<title>GWA_USE_PLACEHOLDERS()</title>
<indexterm zone="GWA-USE-PLACEHOLDERS:CAPS"><primary>GWA_USE_PLACEHOLDERS</primary></indexterm><programlisting>#define             GWA_USE_PLACEHOLDERS(obj)</programlisting>
<para>
Checks whether this widget class has been marked to
use placeholders in child widget operations</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GWA-DEFAULT-WIDTH:CAPS" role="macro">
<title>GWA_DEFAULT_WIDTH()</title>
<indexterm zone="GWA-DEFAULT-WIDTH:CAPS"><primary>GWA_DEFAULT_WIDTH</primary></indexterm><programlisting>#define             GWA_DEFAULT_WIDTH(obj)</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GWA-DEFAULT-HEIGHT:CAPS" role="macro">
<title>GWA_DEFAULT_HEIGHT()</title>
<indexterm zone="GWA-DEFAULT-HEIGHT:CAPS"><primary>GWA_DEFAULT_HEIGHT</primary></indexterm><programlisting>#define             GWA_DEFAULT_HEIGHT(obj)</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GWA-GET-CLASS:CAPS" role="macro">
<title>GWA_GET_CLASS()</title>
<indexterm zone="GWA-GET-CLASS:CAPS"><primary>GWA_GET_CLASS</primary></indexterm><programlisting>#define             GWA_GET_CLASS(type)</programlisting>
<para>
Shorthand for referencing glade adaptor classes from
the plugin eg. GWA_GET_CLASS (GTK_TYPE_CONTAINER)->post_create (adaptor...</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GWA-GET-OCLASS:CAPS" role="macro">
<title>GWA_GET_OCLASS()</title>
<indexterm zone="GWA-GET-OCLASS:CAPS"><primary>GWA_GET_OCLASS</primary></indexterm><programlisting>#define GWA_GET_OCLASS(type) ((GObjectClass*)GWA_GET_CLASS(type))
</programlisting>
<para>
Same as GWA_GET_CLASS but casted to GObjectClass</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GType"><type>GType</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GLADE-VALID-CREATE-REASON:CAPS" role="macro">
<title>GLADE_VALID_CREATE_REASON()</title>
<indexterm zone="GLADE-VALID-CREATE-REASON:CAPS"><primary>GLADE_VALID_CREATE_REASON</primary></indexterm><programlisting>#define GLADE_VALID_CREATE_REASON(reason) (reason &gt;= 0 &amp;&amp; reason &lt; GLADE_CREATE_REASONS)
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeCreateReason" role="enum">
<title>enum GladeCreateReason</title>
<indexterm zone="GladeCreateReason"><primary>GladeCreateReason</primary></indexterm><programlisting>typedef enum
{
	GLADE_CREATE_USER = 0,
	GLADE_CREATE_COPY,
	GLADE_CREATE_LOAD,
	GLADE_CREATE_REBUILD,
	GLADE_CREATE_REASONS
} GladeCreateReason;
</programlisting>
<para>
These are the reasons your <link linkend="GladePostCreateFunc"><type>GladePostCreateFunc</type></link> can be called.</para>
<para>

</para><variablelist role="enum">
<varlistentry id="GLADE-CREATE-USER:CAPS" role="constant">
<term><literal>GLADE_CREATE_USER</literal></term>
<listitem><simpara> Was created at the user's request
                    (this is a good time to set any properties
                    or add children to the project; like GtkFrame's 
                    label for example).
</simpara></listitem>
</varlistentry>
<varlistentry id="GLADE-CREATE-COPY:CAPS" role="constant">
<term><literal>GLADE_CREATE_COPY</literal></term>
<listitem><simpara> Was created as a result of the copy/paste 
                    mechanism, at this point you can count on glade
                    to follow up with properties and children on 
                    its own.
</simpara></listitem>
</varlistentry>
<varlistentry id="GLADE-CREATE-LOAD:CAPS" role="constant">
<term><literal>GLADE_CREATE_LOAD</literal></term>
<listitem><simpara> Was created during the load process.
</simpara></listitem>
</varlistentry>
<varlistentry id="GLADE-CREATE-REBUILD:CAPS" role="constant">
<term><literal>GLADE_CREATE_REBUILD</literal></term>
<listitem><simpara> Was created as a replacement for another project 
                       object; this only happens when the user is 
                       changing a property that is marked by the type 
                       system as G_PARAM_SPEC_CONSTRUCT_ONLY.
</simpara></listitem>
</varlistentry>
<varlistentry id="GLADE-CREATE-REASONS:CAPS" role="constant">
<term><literal>GLADE_CREATE_REASONS</literal></term>
<listitem><simpara> Never used.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GLADE-TYPE-CREATE-REASON:CAPS" role="macro">
<title>GLADE_TYPE_CREATE_REASON</title>
<indexterm zone="GLADE-TYPE-CREATE-REASON:CAPS"><primary>GLADE_TYPE_CREATE_REASON</primary></indexterm><programlisting>#define GLADE_TYPE_CREATE_REASON (glade_create_reason_get_type())
</programlisting>
<para>

</para></refsect2>
<refsect2 id="GladeSetPropertyFunc" role="function">
<title>GladeSetPropertyFunc ()</title>
<indexterm zone="GladeSetPropertyFunc"><primary>GladeSetPropertyFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*GladeSetPropertyFunc)             (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
This delagate function is used to apply the property value on
the runtime object.
</para>
<para>
Sets <parameter>value</parameter> on <parameter>object</parameter> for a given <link linkend="GladePropertyClass"><type>GladePropertyClass</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property identifier
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeGetPropertyFunc" role="function">
<title>GladeGetPropertyFunc ()</title>
<indexterm zone="GladeGetPropertyFunc"><primary>GladeGetPropertyFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*GladeGetPropertyFunc)             (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Gets <parameter>value</parameter> on <parameter>object</parameter> for a given <link linkend="GladePropertyClass"><type>GladePropertyClass</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property identifier
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeVerifyPropertyFunc" role="function">
<title>GladeVerifyPropertyFunc ()</title>
<indexterm zone="GladeVerifyPropertyFunc"><primary>GladeVerifyPropertyFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*GladeVerifyPropertyFunc)          (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
This delagate function is always called whenever setting any
properties with the exception of load time, and copy/paste time
(basicly the two places where we recreate a hierarchy that we
already know "works") its basicly an optional backend provided
boundry checker for properties.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property identifier
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether or not its OK to set <parameter>value</parameter> on <parameter>object</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeChildSetPropertyFunc" role="function">
<title>GladeChildSetPropertyFunc ()</title>
<indexterm zone="GladeChildSetPropertyFunc"><primary>GladeChildSetPropertyFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*GladeChildSetPropertyFunc)        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Called to set the packing property <parameter>property_name</parameter> to <parameter>value</parameter>
on the <parameter>child</parameter> object of <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeChildGetPropertyFunc" role="function">
<title>GladeChildGetPropertyFunc ()</title>
<indexterm zone="GladeChildGetPropertyFunc"><primary>GladeChildGetPropertyFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*GladeChildGetPropertyFunc)        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Called to get the packing property <parameter>property_name</parameter>
on the <parameter>child</parameter> object of <parameter>container</parameter> into <parameter>value</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeChildVerifyPropertyFunc" role="function">
<title>GladeChildVerifyPropertyFunc ()</title>
<indexterm zone="GladeChildVerifyPropertyFunc"><primary>GladeChildVerifyPropertyFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*GladeChildVerifyPropertyFunc)     (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
This delagate function is always called whenever setting any
properties with the exception of load time, and copy/paste time
(basicly the two places where we recreate a hierarchy that we
already know "works") its basicly an optional backend provided
boundry checker for properties.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether or not its OK to set <parameter>value</parameter> on <parameter>object</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeGetChildrenFunc" role="function">
<title>GladeGetChildrenFunc ()</title>
<indexterm zone="GladeGetChildrenFunc"><primary>GladeGetChildrenFunc</primary></indexterm><programlisting><link linkend="GList">GList</link>*              (*GladeGetChildrenFunc)             (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container);</programlisting>
<para>
A function called to get <parameter>containers</parameter> children.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="GList"><type>GList</type></link> of <link linkend="GObject"><type>GObject</type></link> children.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeAddChildFunc" role="function">
<title>GladeAddChildFunc ()</title>
<indexterm zone="GladeAddChildFunc"><primary>GladeAddChildFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*GladeAddChildFunc)                (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *parent,
                                                         <link linkend="GObject">GObject</link> *child);</programlisting>
<para>
Called to add <parameter>child</parameter> to <parameter>parent</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeRemoveChildFunc" role="function">
<title>GladeRemoveChildFunc ()</title>
<indexterm zone="GladeRemoveChildFunc"><primary>GladeRemoveChildFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*GladeRemoveChildFunc)             (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *parent,
                                                         <link linkend="GObject">GObject</link> *child);</programlisting>
<para>
Called to remove <parameter>child</parameter> from <parameter>parent</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeReplaceChildFunc" role="function">
<title>GladeReplaceChildFunc ()</title>
<indexterm zone="GladeReplaceChildFunc"><primary>GladeReplaceChildFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*GladeReplaceChildFunc)            (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *old_obj,
                                                         <link linkend="GObject">GObject</link> *new_obj);</programlisting>
<para>
Called to swap placeholders with project objects
in containers.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old_obj</parameter>&nbsp;:</term>
<listitem><simpara> The old <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_obj</parameter>&nbsp;:</term>
<listitem><simpara> The new <link linkend="GObject"><type>GObject</type></link> child to take its place
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladePostCreateFunc" role="function">
<title>GladePostCreateFunc ()</title>
<indexterm zone="GladePostCreateFunc"><primary>GladePostCreateFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*GladePostCreateFunc)              (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GladeCreateReason">GladeCreateReason</link> reason);</programlisting>
<para>
This function is called exactly once for any project object
instance and can be for any <link linkend="GladeCreateReason"><type>GladeCreateReason</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeCreateReason"><type>GladeCreateReason</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeGetInternalFunc" role="function">
<title>GladeGetInternalFunc ()</title>
<indexterm zone="GladeGetInternalFunc"><primary>GladeGetInternalFunc</primary></indexterm><programlisting><link linkend="GObject">GObject</link>*            (*GladeGetInternalFunc)             (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *parent,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Called to lookup <parameter>child</parameter> in composite object <parameter>parent</parameter> by <parameter>name</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> composite object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> A string identifier
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeActionActivateFunc" role="function">
<title>GladeActionActivateFunc ()</title>
<indexterm zone="GladeActionActivateFunc"><primary>GladeActionActivateFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*GladeActionActivateFunc)          (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *action_path);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeChildActionActivateFunc" role="function">
<title>GladeChildActionActivateFunc ()</title>
<indexterm zone="GladeChildActionActivateFunc"><primary>GladeChildActionActivateFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*GladeChildActionActivateFunc)     (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *action_path);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GladeWidgetAdaptor" role="struct">
<title>GladeWidgetAdaptor</title>
<indexterm zone="GladeWidgetAdaptor"><primary>GladeWidgetAdaptor</primary></indexterm><programlisting>typedef struct {
	GObject      parent_instance;

	GType        type;         /* GType of the widget */

	gchar       *name;         /* Name of the widget, for example GtkButton */


	gchar       *generic_name; /* Used to generate names of new widgets, for
				    * example "button" so that we generate button1,
				    * button2, buttonX ..
				    */
				    
	gchar       *icon_name;    /* icon name for widget class */

	gchar       *title;        /* Translated class name used in the UI */

	GList       *properties;   /* List of GladePropertyClass objects.
				    * [see glade-property.h] this list contains
				    * properties about the widget that we are going
				    * to modify. Like "title", "label", "rows" .
				    * Each property creates an input in the propety
				    * editor.
				    */
	GList       *packing_props; /* List of GladePropertyClass objects that describe
				     * properties for child objects packing definition -
				     * note there may be more than one type of child supported
				     * by a widget and thus they may have different sets
				     * of properties for each type - this association is
				     * managed on the GladePropertyClass proper.
				     */
  
	GList       *signals;        /* List of GladeSignalClass objects */

        GList       *child_packings; /* Default packing property values */

	GList       *actions;        /* A list of GWActionClass */
	
	GList       *packing_actions;/* A list of GWActionClass for child objects */

	GladeWidgetAdaptorPrivate *priv;
} GladeWidgetAdaptor;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="glade-widget-adaptor-create-widget" role="macro">
<title>glade_widget_adaptor_create_widget()</title>
<indexterm zone="glade-widget-adaptor-create-widget"><primary>glade_widget_adaptor_create_widget</primary></indexterm><programlisting>#define             glade_widget_adaptor_create_widget(adaptor, query, ...)</programlisting>
<para>
This factory function returns a new <link linkend="GladeWidget"><type>GladeWidget</type></link> of the correct type/class
with the properties defined in @... and queries the user if nescisary.
</para>
<para>
The resulting object will have all default properties applied to it
including the overrides specified in the catalog, unless the catalog
has specified 'ignore' for that property.
</para>
<para>
Note that the widget class must be fed twice; once as the
leading arg... and also as the property for the <link linkend="GladeWidget"><type>GladeWidget</type></link>
</para>
<para>
this macro returns the newly created <link linkend="GladeWidget"><type>GladeWidget</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>query</parameter>&nbsp;:</term>
<listitem><simpara>   whether to display query dialogs if
          applicable to the class
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>     a <link linkend="NULL:CAPS"><literal>NULL</literal></link> terminated list of string/value pairs of <link linkend="GladeWidget"><type>GladeWidget</type></link> 
          properties
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-from-pclass" role="macro">
<title>glade_widget_adaptor_from_pclass()</title>
<indexterm zone="glade-widget-adaptor-from-pclass"><primary>glade_widget_adaptor_from_pclass</primary></indexterm><programlisting>#define             glade_widget_adaptor_from_pclass(pclass)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pclass</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-from-pspec" role="macro">
<title>glade_widget_adaptor_from_pspec()</title>
<indexterm zone="glade-widget-adaptor-from-pspec"><primary>glade_widget_adaptor_from_pspec</primary></indexterm><programlisting>#define             glade_widget_adaptor_from_pspec(pspec)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pspec</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-create-reason-get-type" role="function">
<title>glade_create_reason_get_type ()</title>
<indexterm zone="glade-create-reason-get-type"><primary>glade_create_reason_get_type</primary></indexterm><programlisting><link linkend="GType">GType</link>               glade_create_reason_get_type        (void);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-from-catalog" role="function">
<title>glade_widget_adaptor_from_catalog ()</title>
<indexterm zone="glade-widget-adaptor-from-catalog"><primary>glade_widget_adaptor_from_catalog</primary></indexterm><programlisting><link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link>* glade_widget_adaptor_from_catalog   (<link linkend="GladeXmlNode">GladeXmlNode</link> *class_node,
                                                         const <link linkend="gchar">gchar</link> *catname,
                                                         const <link linkend="gchar">gchar</link> *icon_prefix,
                                                         <link linkend="GModule">GModule</link> *module,
                                                         const <link linkend="gchar">gchar</link> *domain,
                                                         const <link linkend="gchar">gchar</link> *book);</programlisting>
<para>
Dynamicly creates a subclass of <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link> and subclasses
the closest parent adaptor (parent class adapters must be creates/registerd
prior to child classes, otherwise inheritance wont work) and parses in
the relevent catalog info.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class_node</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeXmlNode"><type>GladeXmlNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>catname</parameter>&nbsp;:</term>
<listitem><simpara> the name of the owning catalog
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_prefix</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>module</parameter>&nbsp;:</term>
<listitem><simpara> the plugin GModule.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&nbsp;:</term>
<listitem><simpara> the domain to translate strings from this plugin from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>book</parameter>&nbsp;:</term>
<listitem><simpara> the devhelp search domain for the owning catalog.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-register" role="function">
<title>glade_widget_adaptor_register ()</title>
<indexterm zone="glade-widget-adaptor-register"><primary>glade_widget_adaptor_register</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_adaptor_register       (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor);</programlisting>
<para>
Registers <parameter>adaptor</parameter> into the Glade core (every supported
object type must have a registered adaptor).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-create-internal" role="function">
<title>glade_widget_adaptor_create_internal ()</title>
<indexterm zone="glade-widget-adaptor-create-internal"><primary>glade_widget_adaptor_create_internal</primary></indexterm><programlisting><link linkend="GladeWidget">GladeWidget</link>*        glade_widget_adaptor_create_internal
                                                        (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                                         <link linkend="GObject">GObject</link> *internal_object,
                                                         const <link linkend="gchar">gchar</link> *internal_name,
                                                         const <link linkend="gchar">gchar</link> *parent_name,
                                                         <link linkend="gboolean">gboolean</link> anarchist,
                                                         <link linkend="GladeCreateReason">GladeCreateReason</link> reason);</programlisting>
<para>
A convenienve function to create a <link linkend="GladeWidget"><type>GladeWidget</type></link> of the prescribed type
for internal widgets.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara>            The parent <link linkend="GladeWidget"><type>GladeWidget</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> for children
                    outside of the hierarchy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>internal_object</parameter>&nbsp;:</term>
<listitem><simpara>   the <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>internal_name</parameter>&nbsp;:</term>
<listitem><simpara>     a string identifier for this internal widget.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent_name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anarchist</parameter>&nbsp;:</term>
<listitem><simpara>         Whether or not this widget is a widget outside
                    of the parent's hierarchy (like a popup window)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara>            The <link linkend="GladeCreateReason"><type>GladeCreateReason</type></link> for which this internal widget
                    was created (usually just pass the reason from the post_create
                    function; note also this is used only by the plugin code so
                    pass something usefull here).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a freshly created <link linkend="GladeWidget"><type>GladeWidget</type></link> wrapper object for the
         <parameter>internal_object</parameter> of name <parameter>internal_name</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-create-widget-real" role="function">
<title>glade_widget_adaptor_create_widget_real ()</title>
<indexterm zone="glade-widget-adaptor-create-widget-real"><primary>glade_widget_adaptor_create_widget_real</primary></indexterm><programlisting><link linkend="GladeWidget">GladeWidget</link>*        glade_widget_adaptor_create_widget_real
                                                        (<link linkend="gboolean">gboolean</link> query,
                                                         const <link linkend="gchar">gchar</link> *first_property,
                                                         ...);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>query</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-get-by-name" role="function">
<title>glade_widget_adaptor_get_by_name ()</title>
<indexterm zone="glade-widget-adaptor-get-by-name"><primary>glade_widget_adaptor_get_by_name</primary></indexterm><programlisting><link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link>* glade_widget_adaptor_get_by_name    (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> name of the widget class (for instance: GtkButton)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an existing <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link> with the name equaling <parameter>name</parameter>,
         or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if such a class doesn't exist
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-get-by-type" role="function">
<title>glade_widget_adaptor_get_by_type ()</title>
<indexterm zone="glade-widget-adaptor-get-by-type"><primary>glade_widget_adaptor_get_by_type</primary></indexterm><programlisting><link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link>* glade_widget_adaptor_get_by_type    (<link linkend="GType">GType</link> type);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GType"><type>GType</type></link> of an object class
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an existing <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link> with the type equaling <parameter>type</parameter>,
         or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if such a class doesn't exist
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-get-property-class" role="function">
<title>glade_widget_adaptor_get_property_class ()</title>
<indexterm zone="glade-widget-adaptor-get-property-class"><primary>glade_widget_adaptor_get_property_class</primary></indexterm><programlisting><link linkend="GladePropertyClass">GladePropertyClass</link>* glade_widget_adaptor_get_property_class
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Retrieves the <link linkend="GladePropertyClass"><type>GladePropertyClass</type></link> for <parameter>name</parameter> in <parameter>adaptor</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="GladePropertyClass"><type>GladePropertyClass</type></link> object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-get-pack-property-class" role="function">
<title>glade_widget_adaptor_get_pack_property_class ()</title>
<indexterm zone="glade-widget-adaptor-get-pack-property-class"><primary>glade_widget_adaptor_get_pack_property_class</primary></indexterm><programlisting><link linkend="GladePropertyClass">GladePropertyClass</link>* glade_widget_adaptor_get_pack_property_class
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Retrieves the <link linkend="GladePropertyClass"><type>GladePropertyClass</type></link> for <parameter>name</parameter> in 
<parameter>adaptor</parameter>'s child properties</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="GladePropertyClass"><type>GladePropertyClass</type></link> object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-default-params" role="function">
<title>glade_widget_adaptor_default_params ()</title>
<indexterm zone="glade-widget-adaptor-default-params"><primary>glade_widget_adaptor_default_params</primary></indexterm><programlisting><link linkend="GParameter">GParameter</link>*         glade_widget_adaptor_default_params (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="gboolean">gboolean</link> construct,
                                                         <link linkend="guint">guint</link> *n_params);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>construct</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-post-create" role="function">
<title>glade_widget_adaptor_post_create ()</title>
<indexterm zone="glade-widget-adaptor-post-create"><primary>glade_widget_adaptor_post_create</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_adaptor_post_create    (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GladeCreateReason">GladeCreateReason</link> reason);</programlisting>
<para>
An adaptor function to be called after the object is created</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>   A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>    The <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara>    The <link linkend="GladeCreateReason"><type>GladeCreateReason</type></link> that <parameter>object</parameter> was created for
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-get-internal-child" role="function">
<title>glade_widget_adaptor_get_internal_child ()</title>
<indexterm zone="glade-widget-adaptor-get-internal-child"><primary>glade_widget_adaptor_get_internal_child</primary></indexterm><programlisting><link linkend="GObject">GObject</link>*            glade_widget_adaptor_get_internal_child
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *internal_name);</programlisting>
<para>
Retrieves the internal object <parameter>internal_name</parameter> from <parameter>object</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>       A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>        The <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>internal_name</parameter>&nbsp;:</term>
<listitem><simpara> The string identifier of the internal object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The internal <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-set-property" role="function">
<title>glade_widget_adaptor_set_property ()</title>
<indexterm zone="glade-widget-adaptor-set-property"><primary>glade_widget_adaptor_set_property</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_adaptor_set_property   (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
This delagate function is used to apply the property value on
the runtime object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>       A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>        The <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property identifier
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>         The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-get-property" role="function">
<title>glade_widget_adaptor_get_property ()</title>
<indexterm zone="glade-widget-adaptor-get-property"><primary>glade_widget_adaptor_get_property</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_adaptor_get_property   (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Gets <parameter>value</parameter> of <parameter>property_name</parameter> on <parameter>object</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>       A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>        The <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property identifier
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>         The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-verify-property" role="function">
<title>glade_widget_adaptor_verify_property ()</title>
<indexterm zone="glade-widget-adaptor-verify-property"><primary>glade_widget_adaptor_verify_property</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_adaptor_verify_property
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
This delagate function is always called whenever setting any
properties with the exception of load time, and copy/paste time
(basicly the two places where we recreate a hierarchy that we
already know "works") its basicly an optional backend provided
boundry checker for properties.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>       A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>        The <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property identifier
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>         The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether or not its OK to set <parameter>value</parameter> on <parameter>object</parameter>, this function
will silently return TRUE if the class did not provide a verify function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-add" role="function">
<title>glade_widget_adaptor_add ()</title>
<indexterm zone="glade-widget-adaptor-add"><primary>glade_widget_adaptor_add</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_adaptor_add            (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child);</programlisting>
<para>
Adds <parameter>child</parameter> to <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>   A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>     The <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-remove" role="function">
<title>glade_widget_adaptor_remove ()</title>
<indexterm zone="glade-widget-adaptor-remove"><primary>glade_widget_adaptor_remove</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_adaptor_remove         (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child);</programlisting>
<para>
Removes <parameter>child</parameter> from <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>   A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>     The <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-get-children" role="function">
<title>glade_widget_adaptor_get_children ()</title>
<indexterm zone="glade-widget-adaptor-get-children"><primary>glade_widget_adaptor_get_children</primary></indexterm><programlisting><link linkend="GList">GList</link>*              glade_widget_adaptor_get_children   (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container);</programlisting>
<para>
Lists the children of <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>   A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="GList"><type>GList</type></link> of children
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-has-child" role="function">
<title>glade_widget_adaptor_has_child ()</title>
<indexterm zone="glade-widget-adaptor-has-child"><primary>glade_widget_adaptor_has_child</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_adaptor_has_child      (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>   A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>     The <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>whether <parameter>child</parameter> is infact inside <parameter>container</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-child-set-property" role="function">
<title>glade_widget_adaptor_child_set_property ()</title>
<indexterm zone="glade-widget-adaptor-child-set-property"><primary>glade_widget_adaptor_child_set_property</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_adaptor_child_set_property
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Sets <parameter>child</parameter>'s packing property identified by <parameter>property_name</parameter> to <parameter>value</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>       A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>     The <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>         The <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The id of the property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>         The <parameter>GValue</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-child-get-property" role="function">
<title>glade_widget_adaptor_child_get_property ()</title>
<indexterm zone="glade-widget-adaptor-child-get-property"><primary>glade_widget_adaptor_child_get_property</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_adaptor_child_get_property
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Gets <parameter>child</parameter>'s packing property identified by <parameter>property_name</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>       A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>     The <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>         The <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The id of the property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>         The <parameter>GValue</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-child-verify-property" role="function">
<title>glade_widget_adaptor_child_verify_property ()</title>
<indexterm zone="glade-widget-adaptor-child-verify-property"><primary>glade_widget_adaptor_child_verify_property</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_adaptor_child_verify_property
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
This delagate function is always called whenever setting any
properties with the exception of load time, and copy/paste time
(basicly the two places where we recreate a hierarchy that we
already know "works") its basicly an optional backend provided
boundry checker for properties.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>       A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>     The <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>         The <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The id of the property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>         The <parameter>GValue</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether or not its OK to set <parameter>value</parameter> on <parameter>object</parameter>, this function
will silently return TRUE if the class did not provide a verify function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-replace-child" role="function">
<title>glade_widget_adaptor_replace_child ()</title>
<indexterm zone="glade-widget-adaptor-replace-child"><primary>glade_widget_adaptor_replace_child</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_adaptor_replace_child  (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *old_obj,
                                                         <link linkend="GObject">GObject</link> *new_obj);</programlisting>
<para>
Replaces <parameter>old_obj</parameter> with <parameter>new_obj</parameter> in <parameter>container</parameter> while positioning
<parameter>new_obj</parameter> where <parameter>old_obj</parameter> was and assigning it appropriate packing 
property values.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old_obj</parameter>&nbsp;:</term>
<listitem><simpara> The old <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_obj</parameter>&nbsp;:</term>
<listitem><simpara> The new <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-query" role="function">
<title>glade_widget_adaptor_query ()</title>
<indexterm zone="glade-widget-adaptor-query"><primary>glade_widget_adaptor_query</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_adaptor_query          (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether the user needs to be queried for
certain properties upon creation of this class.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-get-packing-default" role="function">
<title>glade_widget_adaptor_get_packing_default ()</title>
<indexterm zone="glade-widget-adaptor-get-packing-default"><primary>glade_widget_adaptor_get_packing_default</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              glade_widget_adaptor_get_packing_default
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *child_adaptor,
                                                         <link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *container_adaptor,
                                                         const <link linkend="gchar">gchar</link> *id);</programlisting>
<para>
Gets the default value for <parameter>property_id</parameter> on a widget governed by
<parameter>child_adaptor</parameter> when parented in a widget governed by <parameter>parent_adaptor</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>child_adaptor</parameter>&nbsp;:</term>
<listitem><simpara>  A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container_adaptor</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link> for the parent object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>    The string property identifier
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a string representing the default value for <parameter>property_id</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-is-container" role="function">
<title>glade_widget_adaptor_is_container ()</title>
<indexterm zone="glade-widget-adaptor-is-container"><primary>glade_widget_adaptor_is_container</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_adaptor_is_container   (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor);</programlisting>
<para>
Checks whether or not this adaptor has support
to interface with child objects.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>whether or not <parameter>adaptor</parameter> is a container
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-action-add" role="function">
<title>glade_widget_adaptor_action_add ()</title>
<indexterm zone="glade-widget-adaptor-action-add"><primary>glade_widget_adaptor_action_add</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_adaptor_action_add     (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *action_path,
                                                         const <link linkend="gchar">gchar</link> *label,
                                                         const <link linkend="gchar">gchar</link> *stock,
                                                         <link linkend="gboolean">gboolean</link> important);</programlisting>
<para>
Add an action to <parameter>adaptor</parameter>.
If the action is present then it overrides label and stock</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> The identifier of this action in the action tree
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&nbsp;:</term>
<listitem><simpara> A translated label to show in the UI for this action
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>stock</parameter>&nbsp;:</term>
<listitem><simpara> If set, this stock item will be shown in the UI along side the label.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>important</parameter>&nbsp;:</term>
<listitem><simpara> if this action is important.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether or not the action was added/updated.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-pack-action-add" role="function">
<title>glade_widget_adaptor_pack_action_add ()</title>
<indexterm zone="glade-widget-adaptor-pack-action-add"><primary>glade_widget_adaptor_pack_action_add</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_adaptor_pack_action_add
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *action_path,
                                                         const <link linkend="gchar">gchar</link> *label,
                                                         const <link linkend="gchar">gchar</link> *stock,
                                                         <link linkend="gboolean">gboolean</link> important);</programlisting>
<para>
Add a packing action to <parameter>adaptor</parameter>.
If the action is present then it overrides label and stock</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> The identifier of this action in the action tree
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&nbsp;:</term>
<listitem><simpara> A translated label to show in the UI for this action
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>stock</parameter>&nbsp;:</term>
<listitem><simpara> If set, this stock item will be shown in the UI along side the label.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>important</parameter>&nbsp;:</term>
<listitem><simpara> if this action is important.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether or not the action was added/updated.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-action-remove" role="function">
<title>glade_widget_adaptor_action_remove ()</title>
<indexterm zone="glade-widget-adaptor-action-remove"><primary>glade_widget_adaptor_action_remove</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_adaptor_action_remove  (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *action_path);</programlisting>
<para>
Remove an <parameter>adaptor</parameter>'s action.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> The identifier of this action in the action tree
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether or not the action was removed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-pack-action-remove" role="function">
<title>glade_widget_adaptor_pack_action_remove ()</title>
<indexterm zone="glade-widget-adaptor-pack-action-remove"><primary>glade_widget_adaptor_pack_action_remove</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_widget_adaptor_pack_action_remove
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         const <link linkend="gchar">gchar</link> *action_path);</programlisting>
<para>
Remove an <parameter>adaptor</parameter>'s packing action.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> The identifier of this action in the action tree
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether or not the action was removed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-pack-actions-new" role="function">
<title>glade_widget_adaptor_pack_actions_new ()</title>
<indexterm zone="glade-widget-adaptor-pack-actions-new"><primary>glade_widget_adaptor_pack_actions_new</primary></indexterm><programlisting><link linkend="GList">GList</link>*              glade_widget_adaptor_pack_actions_new
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor);</programlisting>
<para>
Create a list of packing actions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new list of GladeWidgetAction.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-action-activate" role="function">
<title>glade_widget_adaptor_action_activate ()</title>
<indexterm zone="glade-widget-adaptor-action-activate"><primary>glade_widget_adaptor_action_activate</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_adaptor_action_activate
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *action_path);</programlisting>
<para>
An adaptor function to be called on widget actions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>   A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>    The <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> The action identifier in the action tree
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-widget-adaptor-child-action-activate" role="function">
<title>glade_widget_adaptor_child_action_activate ()</title>
<indexterm zone="glade-widget-adaptor-child-action-activate"><primary>glade_widget_adaptor_child_action_activate</primary></indexterm><programlisting><link linkend="void">void</link>                glade_widget_adaptor_child_action_activate
                                                        (<link linkend="GladeWidgetAdaptor">GladeWidgetAdaptor</link> *adaptor,
                                                         <link linkend="GObject">GObject</link> *container,
                                                         <link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *action_path);</programlisting>
<para>
An adaptor function to be called on widget actions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>adaptor</parameter>&nbsp;:</term>
<listitem><simpara>   A <link linkend="GladeWidgetAdaptor"><type>GladeWidgetAdaptor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>    The <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_path</parameter>&nbsp;:</term>
<listitem><simpara> The action identifier in the action tree
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
