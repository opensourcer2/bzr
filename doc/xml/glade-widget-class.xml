<refentry id="gladeui-GladeWidgetClass">
<refmeta>
<refentrytitle>GladeWidgetClass</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GLADEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GladeWidgetClass</refname><refpurpose>Object Class-wide metadata</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;glade.h&gt;


            <link linkend="GladeWidgetClass">GladeWidgetClass</link>;
            <link linkend="GladeSignalClass">GladeSignalClass</link>;
enum        <link linkend="GladeCreateReason">GladeCreateReason</link>;
<link linkend="void">void</link>        (<link linkend="GladePostCreateFunc">*GladePostCreateFunc</link>)          (<link linkend="GObject">GObject</link> *object,
                                             <link linkend="GladeCreateReason">GladeCreateReason</link> reason);
<link linkend="void">void</link>        (<link linkend="GladeChildSetPropertyFunc">*GladeChildSetPropertyFunc</link>)    (<link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>        (<link linkend="GladeChildGetPropertyFunc">*GladeChildGetPropertyFunc</link>)    (<link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             <link linkend="GValue">GValue</link> *value);
<link linkend="GList">GList</link>*      (<link linkend="GladeGetChildrenFunc">*GladeGetChildrenFunc</link>)         (<link linkend="GObject">GObject</link> *container);
<link linkend="void">void</link>        (<link linkend="GladeAddChildFunc">*GladeAddChildFunc</link>)            (<link linkend="GObject">GObject</link> *parent,
                                             <link linkend="GObject">GObject</link> *child);
<link linkend="void">void</link>        (<link linkend="GladeRemoveChildFunc">*GladeRemoveChildFunc</link>)         (<link linkend="GObject">GObject</link> *parent,
                                             <link linkend="GObject">GObject</link> *child);
<link linkend="void">void</link>        (<link linkend="GladeReplaceChildFunc">*GladeReplaceChildFunc</link>)        (<link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *old,
                                             <link linkend="GObject">GObject</link> *new);
<link linkend="void">void</link>        (<link linkend="GladeGetInternalFunc">*GladeGetInternalFunc</link>)         (<link linkend="GObject">GObject</link> *parent,
                                             const <link linkend="gchar">gchar</link> *name,
                                             <link linkend="GObject">GObject</link> **child);
<link linkend="void">void</link>        (<link linkend="GladeEditorLaunchFunc">*GladeEditorLaunchFunc</link>)        (<link linkend="GObject">GObject</link> *object);
<link linkend="GladeWidgetClass">GladeWidgetClass</link>* <link linkend="glade-widget-class-new">glade_widget_class_new</link>    (<link linkend="GladeXmlNode">GladeXmlNode</link> *class_node,
                                             const <link linkend="gchar">gchar</link> *catname,
                                             const <link linkend="gchar">gchar</link> *library,
                                             const <link linkend="gchar">gchar</link> *domain,
                                             const <link linkend="gchar">gchar</link> *book);
<link linkend="void">void</link>        <link linkend="glade-widget-class-free">glade_widget_class_free</link>         (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *widget_class);
<link linkend="GladeWidgetClass">GladeWidgetClass</link>* <link linkend="glade-widget-class-get-by-name">glade_widget_class_get_by_name</link>
                                            (const <link linkend="char">char</link> *name);
<link linkend="GladeWidgetClass">GladeWidgetClass</link>* <link linkend="glade-widget-class-get-by-type">glade_widget_class_get_by_type</link>
                                            (<link linkend="GType">GType</link> type);
#define     <link linkend="glade-widget-class-from-pclass">glade_widget_class_from_pclass</link>  (pclass)
#define     <link linkend="glade-widget-class-create-widget">glade_widget_class_create_widget</link>(class, query, ...)
<link linkend="GladeWidget">GladeWidget</link>* <link linkend="glade-widget-class-create-internal">glade_widget_class_create_internal</link>
                                            (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                             <link linkend="GObject">GObject</link> *internal_object,
                                             const <link linkend="gchar">gchar</link> *internal_name,
                                             const <link linkend="gchar">gchar</link> *parent_name,
                                             <link linkend="gboolean">gboolean</link> anarchist,
                                             <link linkend="GladeCreateReason">GladeCreateReason</link> reason);
<link linkend="GParameter">GParameter</link>* <link linkend="glade-widget-class-default-params">glade_widget_class_default_params</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="gboolean">gboolean</link> construct,
                                             <link linkend="guint">guint</link> *n_params);
<link linkend="gboolean">gboolean</link>    <link linkend="glade-widget-class-query">glade_widget_class_query</link>        (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class);
<link linkend="GList">GList</link>*      <link linkend="glade-widget-class-get-derived-types">glade_widget_class_get_derived_types</link>
                                            (<link linkend="GType">GType</link> type);
<link linkend="void">void</link>        <link linkend="glade-widget-class-dump-param-specs">glade_widget_class_dump_param_specs</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class);
<link linkend="GladePropertyClass">GladePropertyClass</link>* <link linkend="glade-widget-class-get-property-class">glade_widget_class_get_property_class</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             const <link linkend="gchar">gchar</link> *name);
<link linkend="GladeSupportedChild">GladeSupportedChild</link>* <link linkend="glade-widget-class-get-child-support">glade_widget_class_get_child_support</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GType">GType</link> child_type);
<link linkend="void">void</link>        <link linkend="glade-widget-class-container-add">glade_widget_class_container_add</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child);
<link linkend="void">void</link>        <link linkend="glade-widget-class-container-remove">glade_widget_class_container_remove</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child);
<link linkend="gboolean">gboolean</link>    <link linkend="glade-widget-class-container-has-child">glade_widget_class_container_has_child</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child);
<link linkend="GList">GList</link>*      <link linkend="glade-widget-class-container-get-children">glade_widget_class_container_get_children</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container);
<link linkend="void">void</link>        <link linkend="glade-widget-class-container-set-property">glade_widget_class_container_set_property</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>        <link linkend="glade-widget-class-container-get-property">glade_widget_class_container_get_property</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>        <link linkend="glade-widget-class-container-replace-child">glade_widget_class_container_replace_child</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *old,
                                             <link linkend="GObject">GObject</link> *new);
<link linkend="gboolean">gboolean</link>    <link linkend="glade-widget-class-contains-extra">glade_widget_class_contains_extra</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class);
<link linkend="GladePackingDefault">GladePackingDefault</link>* <link linkend="glade-widget-class-get-packing-default">glade_widget_class_get_packing_default</link>
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *child_class,
                                             <link linkend="GladeWidgetClass">GladeWidgetClass</link> *container_class,
                                             const <link linkend="gchar">gchar</link> *propert_id);


</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>
<link linkend="GladeWidgetClass"><type>GladeWidgetClass</type></link> is a structure based on a <link linkend="GType"><type>GType</type></link> and parameters
from the Glade catalog files and is the central metadata for object
classes; it also provides an abstraction later to container apis.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GladeWidgetClass"/>GladeWidgetClass</title>
<indexterm><primary>GladeWidgetClass</primary></indexterm><programlisting>typedef struct {
	GType type;          /* GType of the widget */

	gchar *name;         /* Name of the widget, for example GtkButton */

	gchar *catalog;      /* The name of the widget catalog this class
			      * was declared by.
			      */

	gchar *book;         /* Devhelp search namespace
			      */

	GdkPixbuf *large_icon;     /* The 22x22 icon for the widget */

	GdkPixbuf *small_icon;     /* The 16x16 icon for the widget */


	GdkCursor *cursor;         /* a cursor for inserting widgets */


	gboolean fixed;      /* If this is a GtkContainer, use free-form
			      * placement with drag/resize/paste at mouse...
			      */

	gchar *generic_name; /* Use to generate names of new widgets, for
			      * example "button" so that we generate button1,
			      * button2, buttonX ..
			      */

	gchar *palette_name; /* Name used in the palette */

	GList *properties;   /* List of GladePropertyClass objects.
			      * [see glade-property.h ] this list contains
			      * properties about the widget that we are going
			      * to modify. Like "title", "label", "rows" .
			      * Each property creates an input in the propety
			      * editor.
			      */

	GList *signals;     /* List of GladeSignalClass objects */


	GList *children;    /* List of GladeSupportedChild objects */

        GList *child_packings; /* Default packing property values */

	GModule *module;	/* Module with the (optional) special functions
				 * needed for placeholder_replace, post_create_function
				 * and the set &amp; get functions of the properties
				 * of this class.
				 */
				 
	gboolean toplevel;	/* If this class is toplevel */
	
	/* Executed after widget creation: it takes care of creating the
	 * GladeWidgets associated with internal children. It's also the place
	 * to set sane defaults, e.g. set the size of a window.
	 */
	GladePostCreateFunc           post_create_function;

	/* Retrieves the the internal child of the given name.
	 */
	GladeGetInternalFunc          get_internal_child;

	/* Entry point for custom editors.
	 */
	GladeEditorLaunchFunc         launch_editor;
} GladeWidgetClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GladeSignalClass"/>GladeSignalClass</title>
<indexterm><primary>GladeSignalClass</primary></indexterm><programlisting>typedef struct {
	GSignalQuery query;

	const gchar *name;         /* Name of the signal, eg clicked */
	gchar       *type;         /* Name of the object class that this signal belongs to
				    * eg GtkButton */
} GladeSignalClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GladeCreateReason"/>enum GladeCreateReason</title>
<indexterm><primary>GladeCreateReason</primary></indexterm><programlisting>typedef enum _GladeCreateReason 
{
	GLADE_CREATE_USER = 0,
	GLADE_CREATE_COPY,
	GLADE_CREATE_LOAD,
	GLADE_CREATE_REBUILD,
	GLADE_CREATE_REASONS
} GladeCreateReason;
</programlisting>
<para>
These are the reasons your <link linkend="GladePostCreateFunc"><type>GladePostCreateFunc</type></link> can be called.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>GLADE_CREATE_USER</literal></term>
<listitem><simpara> Was created at the user's request
                    (this is a good time to set any properties
                    or add children to the project; like GtkFrame's 
                    label for example).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GLADE_CREATE_COPY</literal></term>
<listitem><simpara> Was created as a result of the copy/paste 
                    mechanism, at this point you can count on glade
                    to follow up with properties and children on 
                    its own.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GLADE_CREATE_LOAD</literal></term>
<listitem><simpara> Was created during the load process.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GLADE_CREATE_REBUILD</literal></term>
<listitem><simpara> Was created as a replacement for another project 
                       object; this only happens when the user is 
                       changing a property that is marked by the type 
                       system as G_PARAM_SPEC_CONSTRUCT_ONLY.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GLADE_CREATE_REASONS</literal></term>
<listitem><simpara> Never used.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GladePostCreateFunc"/>GladePostCreateFunc ()</title>
<indexterm><primary>GladePostCreateFunc</primary></indexterm><programlisting><link linkend="void">void</link>        (*GladePostCreateFunc)          (<link linkend="GObject">GObject</link> *object,
                                             <link linkend="GladeCreateReason">GladeCreateReason</link> reason);</programlisting>
<para>
This function is called exactly once for any project object
instance and can be for any <link linkend="GladeCreateReason"><type>GladeCreateReason</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeCreateReason"><type>GladeCreateReason</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GladeChildSetPropertyFunc"/>GladeChildSetPropertyFunc ()</title>
<indexterm><primary>GladeChildSetPropertyFunc</primary></indexterm><programlisting><link linkend="void">void</link>        (*GladeChildSetPropertyFunc)    (<link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Called to set the packing property <parameter>property_name</parameter> to <parameter>value</parameter>
on the <parameter>child</parameter> object of <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GladeChildGetPropertyFunc"/>GladeChildGetPropertyFunc ()</title>
<indexterm><primary>GladeChildGetPropertyFunc</primary></indexterm><programlisting><link linkend="void">void</link>        (*GladeChildGetPropertyFunc)    (<link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Called to get the packing property <parameter>property_name</parameter>
on the <parameter>child</parameter> object of <parameter>container</parameter> into <parameter>value</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> The property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GladeGetChildrenFunc"/>GladeGetChildrenFunc ()</title>
<indexterm><primary>GladeGetChildrenFunc</primary></indexterm><programlisting><link linkend="GList">GList</link>*      (*GladeGetChildrenFunc)         (<link linkend="GObject">GObject</link> *container);</programlisting>
<para>
A function called to get <parameter>containers</parameter> children.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="GList"><type>GList</type></link> of <link linkend="GObject"><type>GObject</type></link> children.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GladeAddChildFunc"/>GladeAddChildFunc ()</title>
<indexterm><primary>GladeAddChildFunc</primary></indexterm><programlisting><link linkend="void">void</link>        (*GladeAddChildFunc)            (<link linkend="GObject">GObject</link> *parent,
                                             <link linkend="GObject">GObject</link> *child);</programlisting>
<para>
Called to add <parameter>child</parameter> to <parameter>parent</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GladeRemoveChildFunc"/>GladeRemoveChildFunc ()</title>
<indexterm><primary>GladeRemoveChildFunc</primary></indexterm><programlisting><link linkend="void">void</link>        (*GladeRemoveChildFunc)         (<link linkend="GObject">GObject</link> *parent,
                                             <link linkend="GObject">GObject</link> *child);</programlisting>
<para>
Called to remove <parameter>child</parameter> from <parameter>parent</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GladeReplaceChildFunc"/>GladeReplaceChildFunc ()</title>
<indexterm><primary>GladeReplaceChildFunc</primary></indexterm><programlisting><link linkend="void">void</link>        (*GladeReplaceChildFunc)        (<link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *old,
                                             <link linkend="GObject">GObject</link> *new);</programlisting>
<para>
Called to swap placeholders with project objects
in containers.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old</parameter>&nbsp;:</term>
<listitem><simpara> The old <link linkend="GObject"><type>GObject</type></link> child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new</parameter>&nbsp;:</term>
<listitem><simpara> The new <link linkend="GObject"><type>GObject</type></link> child to take its place
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GladeGetInternalFunc"/>GladeGetInternalFunc ()</title>
<indexterm><primary>GladeGetInternalFunc</primary></indexterm><programlisting><link linkend="void">void</link>        (*GladeGetInternalFunc)         (<link linkend="GObject">GObject</link> *parent,
                                             const <link linkend="gchar">gchar</link> *name,
                                             <link linkend="GObject">GObject</link> **child);</programlisting>
<para>
Called to lookup <parameter>child</parameter> in composite object <parameter>parent</parameter> by <parameter>name</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> composite object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> A string identifier
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> A return location for a <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GladeEditorLaunchFunc"/>GladeEditorLaunchFunc ()</title>
<indexterm><primary>GladeEditorLaunchFunc</primary></indexterm><programlisting><link linkend="void">void</link>        (*GladeEditorLaunchFunc)        (<link linkend="GObject">GObject</link> *object);</programlisting>
<para>
Called to launch a custom editor for <parameter>object</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-new"/>glade_widget_class_new ()</title>
<indexterm><primary>glade_widget_class_new</primary></indexterm><programlisting><link linkend="GladeWidgetClass">GladeWidgetClass</link>* glade_widget_class_new    (<link linkend="GladeXmlNode">GladeXmlNode</link> *class_node,
                                             const <link linkend="gchar">gchar</link> *catname,
                                             const <link linkend="gchar">gchar</link> *library,
                                             const <link linkend="gchar">gchar</link> *domain,
                                             const <link linkend="gchar">gchar</link> *book);</programlisting>
<para>
Merges the contents of the <parameter>parent_class</parameter> on the <parameter>widget_class</parameter>.
The properties of the <parameter>parent_class</parameter> will be prepended to
those of <parameter>widget_class</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class_node</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeXmlNode"><type>GladeXmlNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>catname</parameter>&nbsp;:</term>
<listitem><simpara> the name of the owning catalog
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>library</parameter>&nbsp;:</term>
<listitem><simpara> the name of the library used to load class methods from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&nbsp;:</term>
<listitem><simpara> the domain to translate strings from this plugin from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>book</parameter>&nbsp;:</term>
<listitem><simpara> the devhelp search domain for the owning catalog.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-free"/>glade_widget_class_free ()</title>
<indexterm><primary>glade_widget_class_free</primary></indexterm><programlisting><link linkend="void">void</link>        glade_widget_class_free         (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *widget_class);</programlisting>
<para>
Frees <parameter>widget_class</parameter> and its associated memory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget_class</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidgetClass"><type>GladeWidgetClass</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-get-by-name"/>glade_widget_class_get_by_name ()</title>
<indexterm><primary>glade_widget_class_get_by_name</primary></indexterm><programlisting><link linkend="GladeWidgetClass">GladeWidgetClass</link>* glade_widget_class_get_by_name
                                            (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> name of the widget class (for instance: GtkButton)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an existing <link linkend="GladeWidgetClass"><type>GladeWidgetClass</type></link> with the name equaling <parameter>name</parameter>,
         or <literal>NULL</literal> if such a class doesn't exist
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-get-by-type"/>glade_widget_class_get_by_type ()</title>
<indexterm><primary>glade_widget_class_get_by_type</primary></indexterm><programlisting><link linkend="GladeWidgetClass">GladeWidgetClass</link>* glade_widget_class_get_by_type
                                            (<link linkend="GType">GType</link> type);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-from-pclass"/>glade_widget_class_from_pclass()</title>
<indexterm><primary>glade_widget_class_from_pclass</primary></indexterm><programlisting>#define     glade_widget_class_from_pclass(pclass)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pclass</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-create-widget"/>glade_widget_class_create_widget()</title>
<indexterm><primary>glade_widget_class_create_widget</primary></indexterm><programlisting>#define     glade_widget_class_create_widget(class, query, ...)</programlisting>
<para>
This factory function returns a new <link linkend="GladeWidget"><type>GladeWidget</type></link> of the correct type/class
with the properties defined in @... and queries the user if nescisary.
</para>
<para>
The resulting object will have all default properties applied to it
including the overrides specified in the catalog, unless the catalog
has specified 'ignore' for that property.
</para>
<para>
Note that the widget class must be fed twice; once as the
leading arg... and also as the property for the <link linkend="GladeWidget"><type>GladeWidget</type></link>
</para>
<para>
this macro returns the newly created <link linkend="GladeWidget"><type>GladeWidget</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidgetClass"><type>GladeWidgetClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>query</parameter>&nbsp;:</term>
<listitem><simpara> whether to display query dialogs if
        applicable to the class
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> a <literal>NULL</literal> terminated list of string/value pairs of <link linkend="GladeWidget"><type>GladeWidget</type></link> 
      properties
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-create-internal"/>glade_widget_class_create_internal ()</title>
<indexterm><primary>glade_widget_class_create_internal</primary></indexterm><programlisting><link linkend="GladeWidget">GladeWidget</link>* glade_widget_class_create_internal
                                            (<link linkend="GladeWidget">GladeWidget</link> *parent,
                                             <link linkend="GObject">GObject</link> *internal_object,
                                             const <link linkend="gchar">gchar</link> *internal_name,
                                             const <link linkend="gchar">gchar</link> *parent_name,
                                             <link linkend="gboolean">gboolean</link> anarchist,
                                             <link linkend="GladeCreateReason">GladeCreateReason</link> reason);</programlisting>
<para>
A convenienve function to create a <link linkend="GladeWidget"><type>GladeWidget</type></link> of the prescribed type
for internal widgets.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara>            The parent <link linkend="GladeWidget"><type>GladeWidget</type></link>, or <literal>NULL</literal> for children
                    outside of the hierarchy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>internal_object</parameter>&nbsp;:</term>
<listitem><simpara>   the <link linkend="GObject"><type>GObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>internal_name</parameter>&nbsp;:</term>
<listitem><simpara>     a string identifier for this internal widget.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent_name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anarchist</parameter>&nbsp;:</term>
<listitem><simpara>         Whether or not this widget is a widget outside
                    of the parent's hierarchy (like a popup window)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara>            The <link linkend="GladeCreateReason"><type>GladeCreateReason</type></link> for which this internal widget
                    was created (usually just pass the reason from the post_create
                    function; note also this is used only by the plugin code so
                    pass something usefull here).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a freshly created <link linkend="GladeWidget"><type>GladeWidget</type></link> wrapper object for the
         <parameter>internal_object</parameter> of name <parameter>internal_name</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-default-params"/>glade_widget_class_default_params ()</title>
<indexterm><primary>glade_widget_class_default_params</primary></indexterm><programlisting><link linkend="GParameter">GParameter</link>* glade_widget_class_default_params
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="gboolean">gboolean</link> construct,
                                             <link linkend="guint">guint</link> *n_params);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidgetClass"><type>GladeWidgetClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>construct</parameter>&nbsp;:</term>
<listitem><simpara> whether to return construct params or not construct params
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_params</parameter>&nbsp;:</term>
<listitem><simpara> return location if any defaults are specified for this class.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A list of params for use in <link linkend="g-object-newv"><function>g_object_newv()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-query"/>glade_widget_class_query ()</title>
<indexterm><primary>glade_widget_class_query</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    glade_widget_class_query        (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GladeWidgetClass"><type>GladeWidgetClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether the user needs to be queried for
certain properties upon creation of this class.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-get-derived-types"/>glade_widget_class_get_derived_types ()</title>
<indexterm><primary>glade_widget_class_get_derived_types</primary></indexterm><programlisting><link linkend="GList">GList</link>*      glade_widget_class_get_derived_types
                                            (<link linkend="GType">GType</link> type);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-dump-param-specs"/>glade_widget_class_dump_param_specs ()</title>
<indexterm><primary>glade_widget_class_dump_param_specs</primary></indexterm><programlisting><link linkend="void">void</link>        glade_widget_class_dump_param_specs
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class);</programlisting>
<para>
Dump to the console the properties of <parameter>class</parameter> as specified
by gtk+. You can also run glade3 with : "glade-3 --dump GtkWindow" to
get dump a widget class properties.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidgetClass"><type>GladeWidgetClass</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-get-property-class"/>glade_widget_class_get_property_class ()</title>
<indexterm><primary>glade_widget_class_get_property_class</primary></indexterm><programlisting><link linkend="GladePropertyClass">GladePropertyClass</link>* glade_widget_class_get_property_class
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidgetClass"><type>GladeWidgetClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The <link linkend="GladePropertyClass"><type>GladePropertyClass</type></link> object if there is one associated to this widget
         class.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-get-child-support"/>glade_widget_class_get_child_support ()</title>
<indexterm><primary>glade_widget_class_get_child_support</primary></indexterm><programlisting><link linkend="GladeSupportedChild">GladeSupportedChild</link>* glade_widget_class_get_child_support
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GType">GType</link> child_type);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GladeWidgetClass"><type>GladeWidgetClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child_type</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The <link linkend="GladeSupportedChild"><type>GladeSupportedChild</type></link> object appropriate to use for
container vfuncs for this child_type if this child type is supported,
otherwise NULL.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-container-add"/>glade_widget_class_container_add ()</title>
<indexterm><primary>glade_widget_class_container_add</primary></indexterm><programlisting><link linkend="void">void</link>        glade_widget_class_container_add
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-container-remove"/>glade_widget_class_container_remove ()</title>
<indexterm><primary>glade_widget_class_container_remove</primary></indexterm><programlisting><link linkend="void">void</link>        glade_widget_class_container_remove
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-container-has-child"/>glade_widget_class_container_has_child ()</title>
<indexterm><primary>glade_widget_class_container_has_child</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    glade_widget_class_container_has_child
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-container-get-children"/>glade_widget_class_container_get_children ()</title>
<indexterm><primary>glade_widget_class_container_get_children</primary></indexterm><programlisting><link linkend="GList">GList</link>*      glade_widget_class_container_get_children
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-container-set-property"/>glade_widget_class_container_set_property ()</title>
<indexterm><primary>glade_widget_class_container_set_property</primary></indexterm><programlisting><link linkend="void">void</link>        glade_widget_class_container_set_property
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-container-get-property"/>glade_widget_class_container_get_property ()</title>
<indexterm><primary>glade_widget_class_container_get_property</primary></indexterm><programlisting><link linkend="void">void</link>        glade_widget_class_container_get_property
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             <link linkend="GValue">GValue</link> *value);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-container-replace-child"/>glade_widget_class_container_replace_child ()</title>
<indexterm><primary>glade_widget_class_container_replace_child</primary></indexterm><programlisting><link linkend="void">void</link>        glade_widget_class_container_replace_child
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class,
                                             <link linkend="GObject">GObject</link> *container,
                                             <link linkend="GObject">GObject</link> *old,
                                             <link linkend="GObject">GObject</link> *new);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-contains-extra"/>glade_widget_class_contains_extra ()</title>
<indexterm><primary>glade_widget_class_contains_extra</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    glade_widget_class_contains_extra
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *class);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-widget-class-get-packing-default"/>glade_widget_class_get_packing_default ()</title>
<indexterm><primary>glade_widget_class_get_packing_default</primary></indexterm><programlisting><link linkend="GladePackingDefault">GladePackingDefault</link>* glade_widget_class_get_packing_default
                                            (<link linkend="GladeWidgetClass">GladeWidgetClass</link> *child_class,
                                             <link linkend="GladeWidgetClass">GladeWidgetClass</link> *container_class,
                                             const <link linkend="gchar">gchar</link> *propert_id);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>child_class</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container_class</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>propert_id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
