<refentry id="gladeui-glade-parser">
<refmeta>
<refentrytitle role="top_of_page" id="gladeui-glade-parser.top_of_page">glade-parser</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GLADEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>glade-parser</refname>
<refpurpose></refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="gladeui-glade-parser.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#define             <link linkend="CAST-BAD:CAPS">CAST_BAD</link>
                    <link linkend="GladePropInfo">GladePropInfo</link>;
                    <link linkend="GladeSignalInfo">GladeSignalInfo</link>;
                    <link linkend="GladeAtkActionInfo">GladeAtkActionInfo</link>;
                    <link linkend="GladeAccelInfo">GladeAccelInfo</link>;
                    <link linkend="GladeWidgetInfo">GladeWidgetInfo</link>;
                    <link linkend="GladeChildInfo">GladeChildInfo</link>;
                    <link linkend="GladeInterface">GladeInterface</link>;
                    <link linkend="GladeAtkRelationInfo">GladeAtkRelationInfo</link>;
                    <link linkend="GladePackingDefault">GladePackingDefault</link>;
<link linkend="GladeInterface">GladeInterface</link>*     <link linkend="glade-parser-interface-new">glade_parser_interface_new</link>          (void);
<link linkend="GladeInterface">GladeInterface</link>*     <link linkend="glade-parser-interface-new-from-file">glade_parser_interface_new_from_file</link>
                                                        (const <link linkend="gchar">gchar</link> *file,
                                                         const <link linkend="gchar">gchar</link> *domain);
<link linkend="GladeInterface">GladeInterface</link>*     <link linkend="glade-parser-interface-new-from-buffer">glade_parser_interface_new_from_buffer</link>
                                                        (const <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint">gint</link> len,
                                                         const <link linkend="gchar">gchar</link> *domain);
<link linkend="void">void</link>                <link linkend="glade-parser-interface-destroy">glade_parser_interface_destroy</link>      (<link linkend="GladeInterface">GladeInterface</link> *interface);
<link linkend="gboolean">gboolean</link>            <link linkend="glade-parser-interface-dump">glade_parser_interface_dump</link>         (<link linkend="GladeInterface">GladeInterface</link> *interface,
                                                         const <link linkend="gchar">gchar</link> *filename,
                                                         <link linkend="GError">GError</link> **error);
const <link linkend="gchar">gchar</link>*        <link linkend="glade-parser-pvalue-from-winfo">glade_parser_pvalue_from_winfo</link>      (<link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *winfo,
                                                         const <link linkend="gchar">gchar</link> *pname);
</synopsis>
</refsynopsisdiv>









<refsect1 id="gladeui-glade-parser.description" role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 id="gladeui-glade-parser.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="CAST-BAD:CAPS" role="macro">
<title>CAST_BAD</title>
<indexterm zone="CAST-BAD:CAPS"><primary>CAST_BAD</primary></indexterm><programlisting>#define CAST_BAD (gchar *)
</programlisting>
<para>

</para></refsect2>
<refsect2 id="GladePropInfo" role="struct">
<title>GladePropInfo</title>
<indexterm zone="GladePropInfo"><primary>GladePropInfo</primary></indexterm><programlisting>typedef struct {
    gchar *name;
    gchar *value;
    gchar *comment;
    guint  translatable : 1;
    guint  has_context : 1;
} GladePropInfo;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="GladeSignalInfo" role="struct">
<title>GladeSignalInfo</title>
<indexterm zone="GladeSignalInfo"><primary>GladeSignalInfo</primary></indexterm><programlisting>typedef struct {
    gchar *name;
    gchar *handler;
    gchar *object; /* represents userdata, if lookup is FALSE, then do connect_object with a
                    * widget looked up by name, otherwise g_module_lookup() */
    guint after : 1;
    guint lookup : 1;
} GladeSignalInfo;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="GladeAtkActionInfo" role="struct">
<title>GladeAtkActionInfo</title>
<indexterm zone="GladeAtkActionInfo"><primary>GladeAtkActionInfo</primary></indexterm><programlisting>typedef struct {
    gchar *action_name;
    gchar *description;
} GladeAtkActionInfo;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="GladeAccelInfo" role="struct">
<title>GladeAccelInfo</title>
<indexterm zone="GladeAccelInfo"><primary>GladeAccelInfo</primary></indexterm><programlisting>typedef struct {
    guint key;
    GdkModifierType modifiers;
    gchar *signal;
} GladeAccelInfo;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="GladeWidgetInfo" role="struct">
<title>GladeWidgetInfo</title>
<indexterm zone="GladeWidgetInfo"><primary>GladeWidgetInfo</primary></indexterm><programlisting>typedef struct {
    GladeWidgetInfo *parent;

    gchar *classname;
    gchar *name;

    GladePropInfo *properties;
    guint n_properties;

    GladePropInfo *atk_props;
    guint n_atk_props;

    GladeSignalInfo *signals;
    guint n_signals;
	
    GladeAtkActionInfo *atk_actions;
    guint n_atk_actions;

    GladeAtkRelationInfo *relations;
    guint n_relations;

    GladeAccelInfo *accels;
    guint n_accels;

    GladeChildInfo *children;
    guint n_children;
} GladeWidgetInfo;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="GladeChildInfo" role="struct">
<title>GladeChildInfo</title>
<indexterm zone="GladeChildInfo"><primary>GladeChildInfo</primary></indexterm><programlisting>typedef struct {
    GladePropInfo *properties;
    guint n_properties;

    GladeWidgetInfo *child;
    gchar *internal_child;
} GladeChildInfo;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="GladeInterface" role="struct">
<title>GladeInterface</title>
<indexterm zone="GladeInterface"><primary>GladeInterface</primary></indexterm><programlisting>typedef struct {
    gchar **requires;
    guint n_requires;

    GladeWidgetInfo **toplevels;
    guint n_toplevels;

    GHashTable *names;

    GHashTable *strings;

    gchar *comment;
} GladeInterface;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="GladeAtkRelationInfo" role="struct">
<title>GladeAtkRelationInfo</title>
<indexterm zone="GladeAtkRelationInfo"><primary>GladeAtkRelationInfo</primary></indexterm><programlisting>typedef struct {
    gchar *target;
    gchar *type;
} GladeAtkRelationInfo;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="GladePackingDefault" role="struct">
<title>GladePackingDefault</title>
<indexterm zone="GladePackingDefault"><primary>GladePackingDefault</primary></indexterm><programlisting>typedef struct {
    gchar  *id;
    gchar  *value;
} GladePackingDefault;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="glade-parser-interface-new" role="function">
<title>glade_parser_interface_new ()</title>
<indexterm zone="glade-parser-interface-new"><primary>glade_parser_interface_new</primary></indexterm><programlisting><link linkend="GladeInterface">GladeInterface</link>*     glade_parser_interface_new          (void);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>a newly allocated GladeInterface.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-parser-interface-new-from-file" role="function">
<title>glade_parser_interface_new_from_file ()</title>
<indexterm zone="glade-parser-interface-new-from-file"><primary>glade_parser_interface_new_from_file</primary></indexterm><programlisting><link linkend="GladeInterface">GladeInterface</link>*     glade_parser_interface_new_from_file
                                                        (const <link linkend="gchar">gchar</link> *file,
                                                         const <link linkend="gchar">gchar</link> *domain);</programlisting>
<para>
This function parses a Glade XML interface file to a GladeInterface
object (which is libglade's internal representation of the
interface data).
</para>
<para>
Generally, user code won't need to call this function.  Instead, it
should go through the GladeXML interfaces.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara> the filename of the glade XML file.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&nbsp;:</term>
<listitem><simpara> the translation domain for the XML file.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the GladeInterface structure for the XML file.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-parser-interface-new-from-buffer" role="function">
<title>glade_parser_interface_new_from_buffer ()</title>
<indexterm zone="glade-parser-interface-new-from-buffer"><primary>glade_parser_interface_new_from_buffer</primary></indexterm><programlisting><link linkend="GladeInterface">GladeInterface</link>*     glade_parser_interface_new_from_buffer
                                                        (const <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint">gint</link> len,
                                                         const <link linkend="gchar">gchar</link> *domain);</programlisting>
<para>
This function is similar to glade_parser_parse_file, except that it
parses XML data from a buffer in memory.  This could be used to
embed an interface into the executable, for instance.
</para>
<para>
Generally, user code won't need to call this function.  Instead, it
should go through the GladeXML interfaces.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> a buffer in memory containing XML data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> the length of <parameter>buffer</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&nbsp;:</term>
<listitem><simpara> the translation domain for the XML file.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the GladeInterface structure for the XML buffer.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-parser-interface-destroy" role="function">
<title>glade_parser_interface_destroy ()</title>
<indexterm zone="glade-parser-interface-destroy"><primary>glade_parser_interface_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                glade_parser_interface_destroy      (<link linkend="GladeInterface">GladeInterface</link> *interface);</programlisting>
<para>
Frees a GladeInterface structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>interface</parameter>&nbsp;:</term>
<listitem><simpara> the GladeInterface structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-parser-interface-dump" role="function">
<title>glade_parser_interface_dump ()</title>
<indexterm zone="glade-parser-interface-dump"><primary>glade_parser_interface_dump</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            glade_parser_interface_dump         (<link linkend="GladeInterface">GladeInterface</link> *interface,
                                                         const <link linkend="gchar">gchar</link> *filename,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
This function dumps the contents of a GladeInterface into a file as
XML.  It is used by glade to write glade files.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>interface</parameter>&nbsp;:</term>
<listitem><simpara> the GladeInterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> the filename to write the interface data to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> for error handleing.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>whether the write was successfull or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="glade-parser-pvalue-from-winfo" role="function">
<title>glade_parser_pvalue_from_winfo ()</title>
<indexterm zone="glade-parser-pvalue-from-winfo"><primary>glade_parser_pvalue_from_winfo</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        glade_parser_pvalue_from_winfo      (<link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *winfo,
                                                         const <link linkend="gchar">gchar</link> *pname);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>winfo</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pname</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
